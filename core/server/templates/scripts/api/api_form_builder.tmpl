{{define "api_form_builder_js"}}
    // =============================================================================
    // SIMPLIFIED API FORM BUILDER - USES NEW OPENAPI SCHEMA MANAGER
    // =============================================================================

    const APIFormBuilder = {

        // Generate complete parameter form from endpoint schema
        generateParameterForm(container, endpoint) {
            if (!container || !endpoint) {
                console.error('Invalid container or endpoint for form generation');
                return;
            }

            container.innerHTML = '';
            const sections = [];

            // Build manual query parameters section (always available for testing)
            sections.push(this.buildManualQuerySection());

            // Build path parameters section using simplified schema manager
            const pathParams = APISchemaManager.extractPathParameters(endpoint);
            if (pathParams.length > 0) {
                sections.push(this.buildPathParametersSection(pathParams));
            }

            // Build request body section using simplified schema manager
            const requestFields = APISchemaManager.extractRequestFields(endpoint);
            if (requestFields.length > 0) {
                sections.push(this.buildRequestBodySection(requestFields));
            }

            // Add all sections to container
            sections.forEach(section => {
                if (section) {
                    container.appendChild(section);
                }
            });

            // Initialize URL updating functionality
            setTimeout(() => this.initUrlUpdating(), 100);

            // Show helpful message if no parameters needed
            if (sections.length === 1) { // Only manual query section
                const helpDiv = document.createElement('div');
                helpDiv.className = 'card card-body mt-3';
                helpDiv.innerHTML = `
                    <div class="txt-center txt-hint p-4">
                        <i class="ri-information-line"></i>
                        <p>This endpoint doesn't require any parameters.</p>
                        <p class="txt-sm">You can still add manual query parameters above if needed.</p>
                    </div>
                `;
                container.appendChild(helpDiv);
            }
        },

        // Build path parameters section
        buildPathParametersSection(pathParams) {
            const section = document.createElement('div');
            section.className = 'form-section card card-body mb-3';

            const header = document.createElement('h6');
            header.className = 'form-section-title';
            header.innerHTML = '<i class="ri-route-line"></i> Path Parameters';

            const fieldsContainer = document.createElement('div');
            fieldsContainer.className = 'form-fields';

            pathParams.forEach(param => {
                const field = this.createFormField(param, 'path');
                fieldsContainer.appendChild(field);
            });

            section.appendChild(header);
            section.appendChild(fieldsContainer);

            return section;
        },

        // Build request body section
        buildRequestBodySection(requestFields) {
            const section = document.createElement('div');
            section.className = 'form-section card card-body mb-3';

            const header = document.createElement('h6');
            header.className = 'form-section-title';
            header.innerHTML = '<i class="ri-file-text-line"></i> Request Body';

            const fieldsContainer = document.createElement('div');
            fieldsContainer.className = 'form-fields';

            requestFields.forEach(field => {
                const fieldElement = this.createFormField(field, 'body');
                fieldsContainer.appendChild(fieldElement);
            });

            section.appendChild(header);
            section.appendChild(fieldsContainer);

            return section;
        },

        // Build manual query parameters section
        buildManualQuerySection() {
            const section = document.createElement('div');
            section.className = 'form-section card card-body mb-3';

            const header = document.createElement('h6');
            header.className = 'form-section-title';
            header.innerHTML = '<i class="ri-settings-3-line"></i> Query Parameters';

            const description = document.createElement('p');
            description.className = 'txt-hint txt-sm mb-3';
            description.textContent = 'Add custom query parameters for testing (optional)';

            const queryContainer = document.createElement('div');
            queryContainer.id = 'manual-query-params';
            queryContainer.className = 'query-params-container';

            const addBtn = document.createElement('button');
            addBtn.type = 'button';
            addBtn.className = 'btn btn-sm btn-outline-primary';
            addBtn.innerHTML = '<i class="ri-add-line"></i> Add Query Parameter';
            addBtn.onclick = () => this.addManualQueryParam(queryContainer);

            section.appendChild(header);
            section.appendChild(description);
            section.appendChild(queryContainer);
            section.appendChild(addBtn);

            return section;
        },

        // Create form field element
        createFormField(fieldInfo, paramType) {
            const fieldDiv = document.createElement('div');
            fieldDiv.className = 'form-field mb-3';

            const label = document.createElement('label');
            label.className = 'form-label';
            label.textContent = fieldInfo.name;

            if (fieldInfo.required) {
                label.innerHTML += ' <span class="txt-danger">*</span>';
                fieldDiv.classList.add('required');
            }

            const input = this.createInputElement(fieldInfo, paramType);

            // Add description if available
            if (fieldInfo.description) {
                const helpText = document.createElement('div');
                helpText.className = 'form-help txt-hint txt-sm mt-1';
                helpText.textContent = fieldInfo.description;
                fieldDiv.appendChild(label);
                fieldDiv.appendChild(input);
                fieldDiv.appendChild(helpText);
            } else {
                fieldDiv.appendChild(label);
                fieldDiv.appendChild(input);
            }

            return fieldDiv;
        },

        // Create appropriate input element based on field schema
        createInputElement(fieldInfo, paramType) {
            const inputType = fieldInfo.inputType;
            let input;

            if (inputType === 'select' && fieldInfo.enum) {
                input = document.createElement('select');
                input.className = 'form-control';

                // Add empty option for non-required fields
                if (!fieldInfo.required) {
                    const emptyOption = document.createElement('option');
                    emptyOption.value = '';
                    emptyOption.textContent = '-- Select --';
                    input.appendChild(emptyOption);
                }

                fieldInfo.enum.forEach(value => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = value;
                    input.appendChild(option);
                });

            } else if (inputType === 'textarea') {
                input = document.createElement('textarea');
                input.className = 'form-control';
                input.rows = 3;

            } else if (inputType === 'checkbox') {
                const wrapper = document.createElement('div');
                wrapper.className = 'form-check';

                input = document.createElement('input');
                input.type = 'checkbox';
                input.className = 'form-check-input';

                const checkLabel = document.createElement('label');
                checkLabel.className = 'form-check-label';
                checkLabel.textContent = 'Yes';

                wrapper.appendChild(input);
                wrapper.appendChild(checkLabel);
                return wrapper;

            } else {
                input = document.createElement('input');
                input.type = inputType;
                input.className = 'form-control';

                // Set input attributes based on schema constraints
                if (fieldInfo.minimum !== undefined) {
                    input.min = fieldInfo.minimum;
                }
                if (fieldInfo.maximum !== undefined) {
                    input.max = fieldInfo.maximum;
                }
                if (fieldInfo.minLength !== undefined) {
                    input.minLength = fieldInfo.minLength;
                }
                if (fieldInfo.maxLength !== undefined) {
                    input.maxLength = fieldInfo.maxLength;
                }
                if (fieldInfo.pattern) {
                    input.pattern = fieldInfo.pattern;
                }
            }

            // Set common attributes
            input.name = fieldInfo.name;
            input.required = fieldInfo.required;
            input.dataset.paramType = paramType;

            // Set placeholder or example
            if (fieldInfo.example !== undefined) {
                if (inputType === 'textarea') {
                    input.placeholder = typeof fieldInfo.example === 'object' ?
                        JSON.stringify(fieldInfo.example, null, 2) :
                        String(fieldInfo.example);
                } else {
                    input.placeholder = String(fieldInfo.example);
                }
            }

            // Set default value
            if (fieldInfo.default !== undefined) {
                if (inputType === 'checkbox') {
                    input.checked = Boolean(fieldInfo.default);
                } else {
                    input.value = String(fieldInfo.default);
                }
            }

            return input;
        },

        // Add manual query parameter field
        addManualQueryParam(container) {
            const paramDiv = document.createElement('div');
            paramDiv.className = 'query-param-pair d-flex align-items-center mb-2';

            const keyInput = document.createElement('input');
            keyInput.type = 'text';
            keyInput.className = 'form-control me-2';
            keyInput.placeholder = 'Parameter name';
            keyInput.style.flex = '1';

            const valueInput = document.createElement('input');
            valueInput.type = 'text';
            valueInput.className = 'form-control me-2';
            valueInput.placeholder = 'Parameter value';
            valueInput.style.flex = '1';

            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'btn btn-sm btn-outline-danger';
            removeBtn.innerHTML = '<i class="ri-close-line"></i>';
            removeBtn.onclick = () => container.removeChild(paramDiv);

            paramDiv.appendChild(keyInput);
            paramDiv.appendChild(valueInput);
            paramDiv.appendChild(removeBtn);

            container.appendChild(paramDiv);
            keyInput.focus();
        },

        // Initialize URL updating functionality
        initUrlUpdating() {
            const pathParams = document.querySelectorAll('[data-param-type="path"]');
            pathParams.forEach(input => {
                input.addEventListener('input', () => this.updateDisplayUrl());
            });

            this.updateDisplayUrl();
        },

        // Update display URL with current path parameter values
        updateDisplayUrl() {
            const urlDisplay = document.getElementById('current-url');
            if (!urlDisplay) return;

            const endpoint = APITesterSidebar.currentEndpoint;
            if (!endpoint) return;

            const pathParams = {};
            document.querySelectorAll('[data-param-type="path"]').forEach(input => {
                if (input.value) {
                    pathParams[input.name] = input.value;
                }
            });

            const updatedUrl = APISchemaManager.buildUrl(endpoint, pathParams);
            urlDisplay.textContent = updatedUrl;
        },

        // Validate form using simplified schema manager
        validateForm(endpoint) {
            const formData = this.collectFormData();
            return APISchemaManager.validateRequestData(endpoint, formData);
        },

        // Collect all form data
        collectFormData() {
            const data = {};

            // Collect path parameters
            const pathParams = {};
            document.querySelectorAll('[data-param-type="path"]').forEach(input => {
                if (input.value) {
                    pathParams[input.name] = input.value;
                }
            });

            // Collect body parameters
            const bodyParams = {};
            document.querySelectorAll('[data-param-type="body"]').forEach(input => {
                if (input.type === 'checkbox') {
                    if (input.checked) {
                        bodyParams[input.name] = true;
                    }
                } else if (input.value) {
                    bodyParams[input.name] = input.value;
                }
            });

            // Collect manual query parameters
            const queryParams = {};
            document.querySelectorAll('#manual-query-params .query-param-pair').forEach(pair => {
                const keyInput = pair.querySelector('input:first-child');
                const valueInput = pair.querySelector('input:last-child');
                if (keyInput.value && valueInput.value) {
                    queryParams[keyInput.value] = valueInput.value;
                }
            });

            return {
                pathParams,
                bodyParams,
                queryParams,
                ...bodyParams // For validation, include body params at root level
            };
        },

        // Clear all form fields
        clearForm() {
            const inputs = document.querySelectorAll('.form-field input, .form-field textarea, .form-field select');
            inputs.forEach(input => {
                if (input.type === 'checkbox') {
                    input.checked = false;
                } else {
                    input.value = '';
                }
            });

            // Clear manual query parameters
            const queryContainer = document.getElementById('manual-query-params');
            if (queryContainer) {
                queryContainer.innerHTML = '';
            }

            this.updateDisplayUrl();
        },

        // Populate form with example data
        populateExampleData(endpoint) {
            if (!endpoint) return;

            // Get example request from schema manager
            const example = APISchemaManager.getExampleRequest(endpoint);
            if (!example) return;

            // Populate fields with example data
            Object.entries(example).forEach(([fieldName, value]) => {
                const input = document.querySelector(`[name="${fieldName}"]`);
                if (input) {
                    if (input.type === 'checkbox') {
                        input.checked = Boolean(value);
                    } else if (input.tagName === 'TEXTAREA' && typeof value === 'object') {
                        input.value = JSON.stringify(value, null, 2);
                    } else {
                        input.value = String(value);
                    }
                }
            });

            this.updateDisplayUrl();
        }
    };

    // Export for global use
    if (typeof window !== 'undefined') {
        window.APIFormBuilder = APIFormBuilder;
    }

{{end}}
