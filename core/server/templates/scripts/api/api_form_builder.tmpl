{{define "api_form_builder_js"}}
    // =============================================================================
    // API FORM BUILDER - SIMPLIFIED FOR AST-BASED SCHEMAS
    // =============================================================================

    const APIFormBuilder = {

        // Generate parameter form from endpoint schema
        generateParameterForm(container, endpoint) {
            if (!container || !endpoint) {
                console.error('Invalid container or endpoint for form generation');
                return;
            }

            container.innerHTML = '';
            const sections = [];

            // Build manual query parameters section (always available) - moved to top
            sections.push(this.buildManualQuerySection(endpoint));

            // Build path parameters section
            const pathParams = APISchemaManager.extractPathParameters(endpoint.path);
            if (pathParams.length > 0) {
                sections.push(this.buildPathParametersSection(pathParams));
            }

            // Build request body section from AST schema
            const requestFields = APISchemaManager.extractRequestFields(endpoint);
            if (requestFields.length > 0) {
                sections.push(this.buildRequestBodySection(requestFields));
            }

            // Add all sections to container
            sections.forEach(section => {
                if (section) {
                    container.appendChild(section);
                }
            });

            // Initialize URL updating functionality
            setTimeout(() => this.initUrlUpdating(), 100);

            // If no sections, show helpful message
            if (sections.length === 0) {
                container.innerHTML = `
                    <div class="card card-body">
                        <div class="txt-center txt-hint p-4">
                            <i class="ri-information-line"></i>
                            <p>This endpoint doesn't require any parameters.</p>
                        </div>
                    </div>
                `;
            }
        },

        // Build path parameters section
        buildPathParametersSection(pathParams) {
            const section = document.createElement('div');
            section.className = 'card card-body';
            section.innerHTML = `
                <div class="form-section">
                    <h6 class="form-section-title">
                        <i class="ri-route-line"></i>
                        Path Parameters
                    </h6>
                    <p class="txt-hint txt-xs">These parameters are part of the URL path and are required.</p>
                    <div class="path-parameters">
                        ${pathParams.map(param => this.buildParameterField(param, 'path')).join('')}
                    </div>
                </div>
            `;
            return section;
        },

        // Build request body section from AST schema
        buildRequestBodySection(requestFields) {
            const section = document.createElement('div');
            section.className = 'card card-body';

            const requiredFields = requestFields.filter(field => field.required);
            const optionalFields = requestFields.filter(field => !field.required);

            section.innerHTML = `
                <div class="form-section">
                    <h6 class="form-section-title">
                        <i class="ri-file-text-line"></i>
                        Request Body
                        <span class="txt-xs txt-hint">(application/json)</span>
                    </h6>


                    ${requiredFields.length > 0 ? `
                        <div class="required-fields">
                            <h7 class="txt-sm txt-bold">Required Fields</h7>
                            ${requiredFields.map(field => this.buildRequestField(field)).join('')}
                        </div>
                    ` : ''}

                    ${optionalFields.length > 0 ? `
                        <div class="optional-fields ${requiredFields.length > 0 ? 'm-t-sm' : ''}">
                            <h7 class="txt-sm txt-bold">Optional Fields</h7>
                            ${optionalFields.map(field => this.buildRequestField(field)).join('')}
                        </div>
                    ` : ''}
                </div>
            `;
            return section;
        },

        // Build manual query parameters section
        buildManualQuerySection(endpoint) {
            const section = document.createElement('div');
            section.className = 'card card-body';

            // Get available filters from response schema
            const availableFilters = endpoint ? APISchemaManager.extractAvailableFilters(endpoint) : [];

            let availableFiltersHTML = '';
            if (availableFilters.length > 0) {
                availableFiltersHTML = `
                    <div class="m-b-sm">
                        <div class="txt-hint txt-xs m-b-xs flex align-center gap-5">
                            <i class="ri-filter-line"></i>
                            <span>Available filters:</span>
                        </div>
                        <div class="flex flex-wrap gap-xs">
                            ${availableFilters.map(filter => `
                                <button type="button" class="btn btn-xs btn-secondary btn-outline filter-suggestion"
                                        data-filter-name="${filter.name}"
                                        data-filter-example="${filter.example}"
                                        title="${filter.description}">
                                    ${filter.name}${filter.required ? ' *' : ''}
                                </button>
                            `).join('')}
                        </div>
                    </div>
                `;
            }

            section.innerHTML = `
                <div class="form-section">
                    <h6 class="form-section-title flex align-center gap-5 m-b-sm">
                        <i class="ri-search-line"></i>
                        <span>Query Parameters</span>
                        <span class="txt-xs txt-hint">(optional)</span>
                    </h6>
                    ${availableFiltersHTML}
                    <div class="query-parameters">
                        <div class="flex gap-xs align-center m-b-xs">
                            <input type="text" class="form-control form-control-sm query-param-name" placeholder="name" style="flex: 1;">
                            <input type="text" class="form-control form-control-sm query-param-value" placeholder="value" style="flex: 2;">
                            <button type="button" class="btn btn-sm btn-secondary btn-outline add-query-param" title="Add parameter">
                                <i class="ri-add-line"></i>
                            </button>
                        </div>
                        <div class="added-query-params"></div>
                    </div>
                </div>
            `;

            // Add event listener for adding query parameters
            const addBtn = section.querySelector('.add-query-param');
            addBtn.addEventListener('click', () => this.addQueryParameter(section));

            // Add event listeners for filter suggestions
            section.querySelectorAll('.filter-suggestion').forEach(btn => {
                btn.addEventListener('click', () => {
                    const filterName = btn.getAttribute('data-filter-name');
                    const filterExample = btn.getAttribute('data-filter-example');

                    const nameInput = section.querySelector('.query-param-name');
                    const valueInput = section.querySelector('.query-param-value');

                    nameInput.value = filterName;
                    valueInput.value = '';
                    valueInput.focus();
                });
            });

            return section;
        },

        // Build parameter field (for path parameters)
        buildParameterField(param, source) {
            const fieldId = `param-${source}-${param.name}`;

            return `
                <div class="form-field m-b-xs">
                    <label for="${fieldId}" class="form-label">
                        ${param.name}
                        ${param.required ? '<span class="txt-danger">*</span>' : ''}
                    </label>
                    <input
                        type="text"
                        id="${fieldId}"
                        name="${param.name}"
                        class="form-control"
                        data-source="${source}"
                        ${param.required ? 'required' : ''}
                        placeholder="${param.description || `Enter ${param.name}`}"
                    >
                    ${param.description ? `<div class="field-help">${param.description}</div>` : ''}
                </div>
            `;
        },

        // Build request body field
        buildRequestField(field) {
            const fieldId = `body-${field.name}`;
            const inputType = field.inputType || this.getInputType(field);



            return `
                <div class="form-field m-b-xs">
                    <label for="${fieldId}" class="form-label">
                        ${field.name}
                        ${field.required ? '<span class="txt-danger">*</span>' : ''}
                        <span class="txt-xs txt-hint">(${field.type})</span>
                    </label>
                    ${this.buildFieldInput(field, fieldId, inputType)}

                </div>
            `;
        },

        // Get appropriate input type for field
        getInputType(field) {
            switch (field.type) {
                case 'boolean':
                    return 'checkbox';
                case 'checkbox':
                    return 'checkbox';
                case 'textarea':
                    return 'textarea';
                case 'number':
                    return 'number';
                default:
                    return 'text';
            }
        },

        // Build field input HTML
        buildFieldInput(field, fieldId, inputType) {


            const commonAttrs = `
                id="${fieldId}"
                name="${field.name}"
                ${inputType !== 'checkbox' ? 'class="form-control"' : ''}
                data-type="${field.type}"
                ${field.required ? 'required' : ''}
                ${field.pattern ? `pattern="${field.pattern}"` : ''}
                ${field.minimum !== undefined ? `min="${field.minimum}"` : ''}
                ${field.maximum !== undefined ? `max="${field.maximum}"` : ''}
            `;

            switch (inputType) {
                case 'checkbox':
                    return `
                        <select ${commonAttrs}>
                            <option value="">Select ${field.name}</option>
                            <option value="true">true</option>
                            <option value="false">false</option>
                        </select>
                    `;

                case 'textarea':
                    return `
                        <textarea ${commonAttrs} rows="3" placeholder="Enter ${field.name}"></textarea>
                    `;

                case 'number':
                    return `
                        <input type="number" ${commonAttrs} placeholder="Enter ${field.name}">
                    `;

                default:
                    if (field.enum) {
                        return `
                            <select ${commonAttrs}>
                                <option value="">Select ${field.name}</option>
                                ${field.enum.map(value => `
                                    <option value="${value}">${value}</option>
                                `).join('')}
                            </select>
                        `;
                    }

                    return `
                        <input type="text" ${commonAttrs} placeholder="Enter ${field.name}">
                    `;
            }
        },

        // Add query parameter row
        addQueryParameter(section) {
            const nameInput = section.querySelector('.query-param-name');
            const valueInput = section.querySelector('.query-param-value');
            const container = section.querySelector('.added-query-params');

            const name = nameInput.value.trim();
            const value = valueInput.value.trim();

            if (!name) {
                alert('Parameter name is required');
                nameInput.focus();
                return;
            }

            if (!value) {
                alert('Parameter value is required');
                valueInput.focus();
                return;
            }

            // Create compact parameter display
            const paramRow = document.createElement('div');
            paramRow.className = 'flex align-center gap-xs m-b-xs p-xs txt-xs bg-base-alt border-radius';
            paramRow.innerHTML = `
                <span class="txt-hint">${name}</span>
                <span class="txt-hint">=</span>
                <span class="flex-fill txt-nowrap" title="${value}">${value || '<empty>'}</span>
                <input type="hidden" name="query-${name}" value="${value}">
                <button type="button" class="btn btn-xs btn-transparent remove-query-param" title="Remove">
                    <i class="ri-close-line"></i>
                </button>
            `;

            // Add remove functionality
            paramRow.querySelector('.remove-query-param').addEventListener('click', () => {
                paramRow.remove();
                this.updateUrlDisplay();
            });

            container.appendChild(paramRow);

            // Clear inputs
            nameInput.value = '';
            valueInput.value = '';
            nameInput.focus();

            // Update URL display
            this.updateUrlDisplay();
        },

        // Collect all form data
        collectFormData() {
            const formData = {
                pathParameters: {},
                queryParameters: {},
                requestBody: {}
            };

            // Collect path parameters
            document.querySelectorAll('[data-source="path"]').forEach(input => {
                if (input.value.trim()) {
                    formData.pathParameters[input.name] = input.value.trim();
                }
            });

            // Collect query parameters
            document.querySelectorAll('[name^="query-"]').forEach(input => {
                const paramName = input.name.replace('query-', '');
                if (input.value.trim()) {
                    formData.queryParameters[paramName] = input.value.trim();
                }
            });

            // Collect request body fields (including checkboxes without form-control class)
            document.querySelectorAll('[data-type]').forEach(input => {
                const fieldType = input.getAttribute('data-type');
                let value;



                switch (fieldType) {
                    case 'boolean':
                        value = input.value === 'true' ? true : (input.value === 'false' ? false : null);
                        break;
                    case 'integer':
                        value = input.value ? parseInt(input.value, 10) : null;
                        break;
                    case 'number':
                        value = input.value ? parseFloat(input.value) : null;
                        break;
                    case 'object':
                        try {
                            value = input.value ? JSON.parse(input.value) : null;
                        } catch (e) {
                            value = input.value;
                        }
                        break;
                    default:
                        value = input.value || null;
                }

                if (value !== null && value !== '') {
                    formData.requestBody[input.name] = value;
                }
            });

            return formData;
        },

        // Validate form data
        validateForm(endpoint) {
            const formData = this.collectFormData();
            const errors = [];

            // Validate path parameters
            const pathParams = APISchemaManager.extractPathParameters(endpoint.path);
            pathParams.forEach(param => {
                if (param.required && !formData.pathParameters[param.name]) {
                    errors.push(`Path parameter '${param.name}' is required`);
                }
            });

            // Validate request body
            if (endpoint.request) {
                const validation = APISchemaManager.validateRequestData(endpoint, formData.requestBody);
                errors.push(...validation.errors);
            }

            return {
                valid: errors.length === 0,
                errors: errors,
                data: formData
            };
        },

        // Clear all form fields
        clearForm() {
            // Only clear form controls within the API tester sidebar
            const sidebar = document.getElementById('api-tester-sidebar');
            if (!sidebar) return;

            // Target both .form-control elements and elements with data-type attributes
            const fieldsSelector = '.form-control, [data-type]';
            sidebar.querySelectorAll(fieldsSelector).forEach(field => {
                // Skip if this field is part of API version selection or other global controls
                if (field.closest('.api-version-selector') ||
                    field.closest('#api-tester-sidebar .endpoint-info') ||
                    field.hasAttribute('data-preserve-on-reset')) {
                    return;
                }

                // Handle select fields (including boolean selects)
                if (field.tagName === 'SELECT') {
                    field.selectedIndex = 0; // Reset to first option (usually empty/default)
                } else {
                    field.value = '';
                }
            });

            // Remove added query parameters only within the sidebar
            sidebar.querySelectorAll('.query-param-added').forEach(param => {
                param.remove();
            });

            // Update URL display
            this.updateUrlDisplay();
        },

        // Update the URL display with current query parameters
        updateUrlDisplay() {
            const pathEl = document.getElementById('tester-path');
            if (!pathEl || !window.APITesterSidebar || !window.APITesterSidebar.currentEndpoint) {
                return;
            }

            const basePath = window.APITesterSidebar.currentEndpoint.path;
            const formData = this.collectFormData();

            // Build URL with path parameters
            let displayUrl = basePath;
            for (const [key, value] of Object.entries(formData.pathParameters)) {
                displayUrl = displayUrl.replace(`{${key}}`, value || `{${key}}`);
            }

            // Add query parameters
            const queryParams = new URLSearchParams();
            for (const [key, value] of Object.entries(formData.queryParameters)) {
                if (value.trim()) {
                    queryParams.append(key, value);
                }
            }

            if (queryParams.toString()) {
                displayUrl += '?' + queryParams.toString();
            }

            pathEl.textContent = displayUrl;
        },

        // Initialize URL updating for existing elements
        initUrlUpdating() {
            // Add event listeners to path parameter inputs
            document.addEventListener('input', (e) => {
                if (e.target.matches('[data-source="path"]')) {
                    this.updateUrlDisplay();
                }
            });

            // Add event listeners to query parameter inputs
            const addBtn = document.querySelector('.add-query-param');
            if (addBtn) {
                const nameInput = addBtn.closest('.query-parameters').querySelector('.query-param-name');
                const valueInput = addBtn.closest('.query-parameters').querySelector('.query-param-value');

                if (nameInput && valueInput) {
                    nameInput.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter' && nameInput.value.trim()) {
                            this.addQueryParameter(addBtn.closest('.form-section'));
                        }
                    });

                    valueInput.addEventListener('keypress', (e) => {
                        if (e.key === 'Enter' && nameInput.value.trim()) {
                            this.addQueryParameter(addBtn.closest('.form-section'));
                        }
                    });
                }
            }
        }
    };
{{end}}
