{{define "api_tester_js"}}
    // =============================================================================
    // SIMPLIFIED API TESTER - USES NEW OPENAPI COMPONENTS
    // =============================================================================

    const APITester = {
        currentEndpoint: null,
        initialized: false,
        _eventCleanup: [],

        // Initialize the API tester
        init() {
            if (this.initialized) {
                return;
            }

            try {
                this._bindEvents();
                this._setupStateObservers();
                this.initialized = true;
            } catch (error) {
                console.error('Failed to initialize APITester:', error);
                this._handleError(error, 'APITester initialization failed');
            }
        },

        // Bind event listeners
        _bindEvents() {
            // Send request button
            const sendBtn = document.getElementById('send-request-btn');
            if (sendBtn) {
                const cleanup = this._addListener(sendBtn, 'click', () => {
                    this.sendRequest();
                });
                this._eventCleanup.push(cleanup);
            }

            // Reset form button
            const resetBtn = document.getElementById('reset-form-btn');
            if (resetBtn) {
                const cleanup = this._addListener(resetBtn, 'click', () => {
                    this.resetForm();
                });
                this._eventCleanup.push(cleanup);
            }

            // Copy response button
            const copyBtn = document.getElementById('copy-response-btn');
            if (copyBtn) {
                const cleanup = this._addListener(copyBtn, 'click', () => {
                    this.copyResponse();
                });
                this._eventCleanup.push(cleanup);
            }
        },

        // Setup state observers to react to endpoint changes
        _setupStateObservers() {
            if (typeof APIState !== 'undefined') {
                const cleanup = APIState.addObserver('endpoint:selected', (data) => {
                    this.processEndpoint(data.endpoint);
                });
                this._eventCleanup.push(cleanup);
            }
        },

        // Process endpoint and generate form using simplified components
        processEndpoint(endpoint) {
            if (!endpoint) {
                console.error('No endpoint provided to process');
                this._clearTester();
                return;
            }

            this.currentEndpoint = endpoint;

            try {
                // Update endpoint information display
                this._updateEndpointInfo(endpoint);

                // Generate parameter form using simplified form builder
                this._generateParameterForm(endpoint);

                // Update auth requirements display
                this._updateAuthInfo(endpoint);

                // Clear any previous response
                this._clearResponse();

                // Update UI state
                this._updateTesterUI();

            } catch (error) {
                console.error('Failed to process endpoint:', error);
                this._handleError(error, `Processing endpoint ${endpoint.method} ${endpoint.path}`);
            }
        },

        // Update endpoint information display
        _updateEndpointInfo(endpoint) {
            const methodEl = document.getElementById('tester-method');
            const pathEl = document.getElementById('tester-path');
            const summaryEl = document.getElementById('tester-summary');
            const descriptionEl = document.getElementById('tester-description');

            if (methodEl) {
                methodEl.textContent = endpoint.method.toUpperCase();
                methodEl.className = `method-badge method-${endpoint.method.toLowerCase()}`;
            }

            if (pathEl) {
                pathEl.textContent = endpoint.path;
            }

            if (summaryEl) {
                summaryEl.textContent = endpoint.summary || endpoint.operationId || 'No summary available';
            }

            if (descriptionEl) {
                if (endpoint.description) {
                    descriptionEl.innerHTML = endpoint.description;
                    descriptionEl.style.display = 'block';
                } else {
                    descriptionEl.style.display = 'none';
                }
            }

            // Update tags display
            this._updateTagsDisplay(endpoint.tags || []);
        },

        // Update tags display
        _updateTagsDisplay(tags) {
            const tagsEl = document.getElementById('tester-tags');
            if (!tagsEl) return;

            if (tags.length === 0) {
                tagsEl.style.display = 'none';
                return;
            }

            tagsEl.innerHTML = tags.map(tag =>
                `<span class="tag-badge">${tag}</span>`
            ).join('');
            tagsEl.style.display = 'block';
        },

        // Generate parameter form using simplified form builder
        _generateParameterForm(endpoint) {
            const formContainer = document.getElementById('parameters-form');
            if (!formContainer) {
                return;
            }

            if (typeof APIFormBuilder === 'undefined') {
                console.error('APIFormBuilder not available');
                this._showFormError('Form builder not available');
                return;
            }

            try {
                // Use simplified form builder to generate the complete form
                APIFormBuilder.generateParameterForm(formContainer, endpoint);
            } catch (error) {
                console.error('Failed to generate parameter form:', error);
                this._showFormError('Failed to generate form: ' + error.message);
            }
        },

        // Update authentication info display
        _updateAuthInfo(endpoint) {
            const authInfoEl = document.getElementById('auth-info');
            if (!authInfoEl) return;

            if (typeof APISchemaManager === 'undefined') {
                return;
            }

            const authInfo = APISchemaManager.getAuthInfo(endpoint);

            if (!authInfo.required) {
                authInfoEl.innerHTML = `
                    <div class="auth-info-item">
                        <i class="ri-global-line"></i>
                        <span>No authentication required</span>
                    </div>
                `;
                authInfoEl.className = 'auth-info auth-none';
            } else {
                authInfoEl.innerHTML = `
                    <div class="auth-info-item">
                        <i class="ri-lock-line"></i>
                        <span>Authentication required (${authInfo.type})</span>
                    </div>
                    ${authInfo.description ? `<div class="auth-description">${authInfo.description}</div>` : ''}
                `;
                authInfoEl.className = 'auth-info auth-required';
            }
        },

        // Send request using simplified request handler
        async sendRequest() {
            if (!this.currentEndpoint) {
                this._showError('No endpoint selected for testing');
                return;
            }

            if (typeof APIRequestHandler === 'undefined') {
                this._showError('Request handler not available');
                return;
            }

            try {
                // Get admin token for regular tester (defaults to superuser auth)
                let authToken = null;
                const adminAuth = localStorage.getItem('__pb_superuser_auth__');
                if (adminAuth) {
                    const parsed = JSON.parse(adminAuth);
                    authToken = parsed.token;
                }

                // Use simplified request handler with admin token
                await APIRequestHandler.sendRequest(this.currentEndpoint, authToken);

            } catch (error) {
                console.error('Request failed:', error);
                this._handleError(error, 'Request execution failed');
            }
        },

        // Reset form to initial state
        resetForm() {
            if (typeof APIFormBuilder === 'undefined') {
                return;
            }

            try {
                APIFormBuilder.clearForm();
                this._clearResponse();
                this._updateStatus('info', 'Form reset');
            } catch (error) {
                console.error('Failed to reset form:', error);
                this._handleError(error, 'Form reset failed');
            }
        },

        // Copy response data to clipboard
        async copyResponse() {
            const responseBody = document.getElementById('response-body');
            if (!responseBody) {
                this._showError('No response to copy');
                return;
            }

            try {
                // Extract text content from response
                const codeElement = responseBody.querySelector('code') || responseBody;
                const content = codeElement.textContent || codeElement.innerText;

                if (!content || content.trim() === '') {
                    this._showError('No response content to copy');
                    return;
                }

                // Copy to clipboard
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    await navigator.clipboard.writeText(content);
                    this._updateStatus('success', 'Response copied to clipboard');
                } else {
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = content;
                    textArea.style.position = 'fixed';
                    textArea.style.opacity = '0';
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    this._updateStatus('success', 'Response copied to clipboard');
                }

            } catch (error) {
                console.error('Failed to copy response:', error);
                this._showError('Failed to copy response: ' + error.message);
            }
        },

        // Clear response display
        _clearResponse() {
            if (typeof APIRequestHandler !== 'undefined' && APIRequestHandler.clearResponse) {
                APIRequestHandler.clearResponse();
            } else {
                // Fallback: clear manually
                const responseBody = document.getElementById('response-body');
                const responseHeaders = document.getElementById('response-headers');
                const responseStatus = document.getElementById('response-status');

                if (responseBody) responseBody.innerHTML = '<div class="txt-hint">No response yet</div>';
                if (responseHeaders) responseHeaders.innerHTML = '<div class="txt-hint">No headers yet</div>';
                if (responseStatus) {
                    responseStatus.className = 'response-status';
                    responseStatus.innerHTML = '<span class="txt-hint">Ready</span>';
                }
            }
        },

        // Clear tester when no endpoint is selected
        _clearTester() {
            this.currentEndpoint = null;

            // Clear form
            const formContainer = document.getElementById('parameters-form');
            if (formContainer) {
                formContainer.innerHTML = '<div class="txt-hint p-4">Select an endpoint to test</div>';
            }

            // Clear endpoint info
            const methodEl = document.getElementById('tester-method');
            const pathEl = document.getElementById('tester-path');
            const summaryEl = document.getElementById('tester-summary');
            const descriptionEl = document.getElementById('tester-description');

            if (methodEl) methodEl.textContent = '';
            if (pathEl) pathEl.textContent = '';
            if (summaryEl) summaryEl.textContent = '';
            if (descriptionEl) descriptionEl.style.display = 'none';

            // Clear response
            this._clearResponse();
        },

        // Update tester UI state
        _updateTesterUI() {
            const sendBtn = document.getElementById('send-request-btn');
            const resetBtn = document.getElementById('reset-form-btn');

            const hasEndpoint = !!this.currentEndpoint;

            if (sendBtn) sendBtn.disabled = !hasEndpoint;
            if (resetBtn) resetBtn.disabled = !hasEndpoint;
            if (exampleBtn) {
                // Only show example button if endpoint has example data
                const hasExample = hasEndpoint &&
                    typeof APISchemaManager !== 'undefined' &&
                    APISchemaManager.getExampleRequest(this.currentEndpoint);
                exampleBtn.style.display = hasExample ? 'inline-block' : 'none';
            }
        },

        // Show form error
        _showFormError(message) {
            const formContainer = document.getElementById('parameters-form');
            if (formContainer) {
                formContainer.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="ri-error-warning-line"></i>
                        ${message}
                    </div>
                `;
            }
        },

        // Update status message
        _updateStatus(type, message) {
            if (typeof ErrorStatusManager !== 'undefined') {
                ErrorStatusManager.updateStatus(type, message);
            }
        },

        // Show error message
        _showError(message) {
            this._updateStatus('error', message);
        },

        // Handle errors
        _handleError(error, context) {
            const message = error.message || String(error);
            console.error(`${context}:`, error);

            if (typeof ErrorStatusManager !== 'undefined') {
                ErrorStatusManager.handleError(error, context);
            } else {
                this._showError(`${context}: ${message}`);
            }
        },

        // Add event listener with cleanup tracking
        _addListener(element, event, handler) {
            element.addEventListener(event, handler);
            return () => element.removeEventListener(event, handler);
        },

        // Check if tester is ready
        isReady() {
            return this.initialized &&
                   typeof APIFormBuilder !== 'undefined' &&
                   typeof APIRequestHandler !== 'undefined' &&
                   typeof APISchemaManager !== 'undefined';
        },

        // Get current endpoint
        getCurrentEndpoint() {
            return this.currentEndpoint;
        },

        // Set endpoint (for external use)
        setEndpoint(endpoint) {
            this.processEndpoint(endpoint);
        },

        // Cleanup resources
        cleanup() {
            // Remove event listeners
            this._eventCleanup.forEach(cleanup => {
                try {
                    cleanup();
                } catch (e) {
                    // Silent cleanup error
                }
            });
            this._eventCleanup = [];

            this.currentEndpoint = null;
            this.initialized = false;
        },

        // Reinitialize tester
        reinit() {
            this.cleanup();
            this.init();
        }
    };

    // Export for global use
    if (typeof window !== 'undefined') {
        window.APITester = APITester;
    }

{{end}}
