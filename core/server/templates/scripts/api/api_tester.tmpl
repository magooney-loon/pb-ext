{{define "api_tester_js"}}
    // =============================================================================
    // API TESTER - SIMPLIFIED FOR AST-BASED SCHEMAS
    // =============================================================================

    const APITester = {
        currentEndpoint: null,
        initialized: false,

        // Initialize the API tester
        init() {
            if (this.initialized) {
                return;
            }
            this.bindEvents();
            this.initialized = true;
            console.log('APITester initialized');
        },

        // Bind event listeners
        bindEvents() {
            // Form action buttons
            const sendBtn = document.getElementById('send-request-btn');
            const resetBtn = document.getElementById('reset-form-btn');

            if (sendBtn) {
                sendBtn.addEventListener('click', () => this.sendRequest());
            }

            if (resetBtn) {
                resetBtn.addEventListener('click', () => this.resetForm());
            }
        },

        // Process endpoint and generate form
        processEndpoint(endpoint) {
            if (!endpoint) {
                console.error('No endpoint provided to process');
                return;
            }

            this.currentEndpoint = endpoint;
            console.log('Processing endpoint:', endpoint.method, endpoint.path);

            const container = document.getElementById('schema-form-container');
            if (!container) {
                console.error('Schema form container not found');
                return;
            }

            try {
                // Generate form using simplified form builder
                APIFormBuilder.generateParameterForm(container, endpoint);

                // Update endpoint info display
                this.updateEndpointInfo();

            } catch (error) {
                console.error('Failed to process endpoint:', error);
                this.showError(container, error);
            }
        },

        // Update endpoint information display
        updateEndpointInfo() {
            const methodElement = document.getElementById('current-method');
            const pathElement = document.getElementById('current-path');
            const descElement = document.getElementById('current-description');

            if (methodElement) {
                methodElement.textContent = this.currentEndpoint.method.toUpperCase();
                methodElement.className = `http-method ${this.currentEndpoint.method.toLowerCase()}`;
            }

            if (pathElement) {
                pathElement.textContent = this.currentEndpoint.path;
            }

            if (descElement) {
                descElement.textContent = this.currentEndpoint.description || 'No description available';
            }
        },

        // Show error state
        showError(container, error) {
            container.innerHTML = `
                <div class="alert alert-danger">
                    <div class="flex align-center gap-2 mb-2">
                        <i class="ri-error-warning-line"></i>
                        <strong>Failed to Process Endpoint</strong>
                    </div>
                    <p>${error.message}</p>
                    <details class="mt-2">
                        <summary class="txt-sm">Debug Information</summary>
                        <pre class="txt-xs mt-1">${JSON.stringify({
                            endpoint: this.currentEndpoint,
                            error: error.toString()
                        }, null, 2)}</pre>
                    </details>
                </div>
            `;
        },

        // Send HTTP request
        async sendRequest() {
            if (!this.currentEndpoint) {
                console.error('No current endpoint for request');
                return;
            }

            try {
                console.log('Sending request for endpoint:', this.currentEndpoint.method, this.currentEndpoint.path);
                await APIRequestHandler.sendRequest(this.currentEndpoint);
            } catch (error) {
                console.error('Request failed:', error);
                // Error handling is done by APIRequestHandler
            }
        },

        // Reset form
        resetForm() {
            console.log('Resetting form');

            // Clear form fields
            APIFormBuilder.clearForm();

            // Clear response area
            const responseContainer = document.getElementById('api-response-container');
            if (responseContainer) {
                responseContainer.innerHTML = `
                    <div class="txt-center txt-hint p-4">
                        <i class="ri-send-plane-line ri-xl"></i>
                        <p>Send a request to see the response</p>
                    </div>
                `;
            }

            // Re-process the endpoint to regenerate clean form
            if (this.currentEndpoint) {
                this.processEndpoint(this.currentEndpoint);
            }
        },

        // Public API for opening sidebar (for endpoint renderer integration)
        openSidebar(method, path, endpoint) {
            if (typeof APITesterSidebar !== 'undefined') {
                console.log('Opening tester sidebar:', method, path);
                APITesterSidebar.openSidebar(method, path, endpoint);
            } else {
                console.error('APITesterSidebar not available');
            }
        },

        // Get current endpoint info
        getCurrentEndpoint() {
            return this.currentEndpoint;
        },

        // Check if endpoint requires authentication
        requiresAuth() {
            return this.currentEndpoint?.auth?.required || false;
        },

        // Get endpoint summary information
        getEndpointSummary() {
            if (!this.currentEndpoint) return null;

            return {
                method: this.currentEndpoint.method,
                path: this.currentEndpoint.path,
                description: this.currentEndpoint.description || 'No description available',
                tags: this.currentEndpoint.tags || [],
                requiresAuth: this.requiresAuth(),
                authType: this.currentEndpoint.auth?.type || 'none'
            };
        },

        // Generate cURL command for current endpoint
        generateCurlCommand() {
            if (!this.currentEndpoint) {
                return 'No endpoint selected';
            }

            try {
                const validation = APIFormBuilder.validateForm(this.currentEndpoint);
                if (!validation.valid) {
                    return `Error: ${validation.errors.join(', ')}`;
                }

                return APIRequestHandler.generateCurlCommand(this.currentEndpoint, validation.data);
            } catch (error) {
                return `Error generating cURL: ${error.message}`;
            }
        },

        // Copy cURL command to clipboard
        copyCurlCommand() {
            if (!this.currentEndpoint) {
                console.error('No endpoint selected');
                return;
            }

            APIRequestHandler.copyCurlCommand(this.currentEndpoint);
        }
    };

    // Make APITester globally available
    window.APITester = APITester;
{{end}}
