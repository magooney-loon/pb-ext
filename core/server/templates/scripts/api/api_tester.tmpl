{{define "api_tester_js"}}
    // =============================================================================
    // API TESTER - REFACTORED COORDINATOR
    // =============================================================================

    const APITester = {
        currentEndpoint: null,
        parameterSchema: null,
        debug: true,

        // Initialize the API tester
        init() {
            this.log('APITester initializing...');
            this.bindEvents();
            this.log('APITester initialized successfully');
        },

        // Debug logging
        log(...args) {
            if (this.debug) {
                console.log('[APITester]', ...args);
            }
        },

        // Bind event listeners
        bindEvents() {
            // Listen for sidebar events
            document.addEventListener('apiTesterSidebarOpened', (e) => {
                this.handleSidebarOpened(e.detail);
            });

            document.addEventListener('apiTesterSidebarClosed', () => {
                this.handleSidebarClosed();
            });

            document.addEventListener('apiTesterTabChange', (e) => {
                this.handleTabChange(e.detail);
            });

            // Form action buttons
            const sendBtn = document.getElementById('send-request-btn');
            const resetBtn = document.getElementById('reset-form-btn');

            if (sendBtn) {
                sendBtn.addEventListener('click', () => this.sendRequest());
            }

            if (resetBtn) {
                resetBtn.addEventListener('click', () => this.resetForm());
            }
        },

        // Handle sidebar opened event
        handleSidebarOpened(detail) {
            this.log('Sidebar opened with endpoint:', detail);
            this.log('Full endpoint detail object:', JSON.stringify(detail, null, 2));

            this.currentEndpoint = detail;

            // Process the endpoint to generate form
            this.processEndpointSchema();
        },

        // Handle sidebar closed event
        handleSidebarClosed() {
            this.log('Sidebar closed, cleaning up');
            this.currentEndpoint = null;
            this.parameterSchema = null;
        },

        // Handle tab change event
        handleTabChange(detail) {
            if (detail.tab === 'response') {
                this.refreshResponseDisplay();
            }
        },

        // Process endpoint schema and generate form
        processEndpointSchema() {
            const container = document.getElementById('schema-form-container');
            if (!container) {
                console.error('Schema form container not found');
                return;
            }

            try {
                // Show loading state
                this.showLoadingState(container);

                // Extract parameter schema from endpoint data using APISchemaManager
                this.parameterSchema = APISchemaManager.extractParameterSchema(this.currentEndpoint);

                this.log('Extracted parameter schema:', JSON.stringify(this.parameterSchema, null, 2));

                // Generate form using APIFormBuilder
                APIFormBuilder.generateParameterForm(container, this.parameterSchema, this.currentEndpoint);

                // Populate default values using APIExampleGenerator
                APIExampleGenerator.populateDefaultValues(this.parameterSchema);

                this.log('Parameter schema processed successfully');

            } catch (error) {
                console.error('Schema processing error:', error);
                this.showError(container, error);
            }
        },

        // Show loading state
        showLoadingState(container) {
            container.innerHTML = `
                <div class="txt-center txt-hint p-4">
                    <i class="ri-loader-4-line animate-spin"></i>
                    <p>Processing endpoint schema...</p>
                </div>
            `;
        },

        // Show error state
        showError(container, error) {
            container.innerHTML = `
                <div class="txt-center p-4">
                    <div class="alert alert-danger">
                        <i class="ri-error-warning-line"></i>
                        <p><strong>Schema Processing Failed:</strong></p>
                        <p>${error.message}</p>
                    </div>
                    <details>
                        <summary>Debug Information</summary>
                        <pre class="txt-xs mt-2">${JSON.stringify({
                            currentEndpoint: this.currentEndpoint,
                            error: error.toString(),
                            stack: error.stack
                        }, null, 2)}</pre>
                    </details>
                </div>
            `;
        },

        // Send HTTP request using APIRequestHandler
        async sendRequest() {
            if (!this.currentEndpoint) {
                console.error('No current endpoint for request');
                return;
            }

            try {
                this.log('Delegating request to APIRequestHandler...');
                await APIRequestHandler.sendRequest(this.currentEndpoint);
            } catch (error) {
                this.log('Request failed:', error);
                // Error handling is done by APIRequestHandler
            }
        },

        // Reset form using APIRequestHandler
        resetForm() {
            this.log('Delegating form reset to APIRequestHandler...');
            APIRequestHandler.resetForm();

            // Re-process the endpoint schema to regenerate clean form
            this.processEndpointSchema();
        },

        // Refresh response display when switching to response tab
        refreshResponseDisplay() {
            // Check if we have response content to display
            const emptyState = document.getElementById('response-empty-state');
            const hasContent = emptyState && emptyState.style.display === 'none';

            if (hasContent) {
                this.log('Response content already displayed');
            } else {
                this.log('No response content to display');
            }
        },

        // Public API for opening sidebar (for endpoint renderer integration)
        openSidebar(method, path, endpointData) {
            if (typeof APITesterSidebar !== 'undefined') {
                APITesterSidebar.openSidebar(method, path, endpointData);
            } else {
                console.warn('APITesterSidebar not available');
            }
        },

        // Switch to raw JSON input mode (public API for form builder)
        useRawJSON() {
            this.log('Switching to raw JSON mode...');
            APIFormBuilder.switchToRawJSON();
        },

        // Generate example for current endpoint (public API)
        generateExample() {
            if (!this.parameterSchema || !this.currentEndpoint) {
                console.warn('Cannot generate example: missing schema or endpoint');
                return null;
            }

            return APIExampleGenerator.generateCompleteExample(this.parameterSchema, this.currentEndpoint);
        },

        // Get current endpoint info (public API)
        getCurrentEndpoint() {
            return this.currentEndpoint;
        },

        // Get current parameter schema (public API)
        getParameterSchema() {
            return this.parameterSchema;
        },

        // Check if endpoint requires authentication (utility method)
        requiresAuth() {
            if (!this.currentEndpoint || !this.currentEndpoint.data) return false;

            // Check if endpoint has security requirements
            return this.currentEndpoint.data.security && this.currentEndpoint.data.security.length > 0;
        },

        // Get endpoint summary information (utility method)
        getEndpointSummary() {
            if (!this.currentEndpoint) return null;

            return {
                method: this.currentEndpoint.method,
                path: this.currentEndpoint.path,
                summary: this.currentEndpoint.data?.summary || 'No summary available',
                description: this.currentEndpoint.data?.description || '',
                tags: this.currentEndpoint.data?.tags || [],
                requiresAuth: this.requiresAuth()
            };
        }
    };
{{end}}
