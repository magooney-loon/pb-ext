{{define "api_request_handler_js"}}
    // =============================================================================
    // API REQUEST HANDLER - SIMPLIFIED FOR AST-BASED SCHEMAS
    // =============================================================================

    const APIRequestHandler = {

        // Send HTTP request using simplified form data
        async sendRequest(endpoint) {
            if (!endpoint) {
                console.error('No endpoint provided for request');
                return;
            }

            const sendBtn = document.getElementById('send-request-btn');
            const originalText = sendBtn ? sendBtn.innerHTML : '';

            try {
                // Update button state
                if (sendBtn) {
                    sendBtn.innerHTML = '<i class="ri-loader-4-line animate-spin"></i> Sending...';
                    sendBtn.disabled = true;
                }

                // Validate and collect form data
                const validation = APIFormBuilder.validateForm(endpoint);

                if (!validation.valid) {
                    throw new Error(`Form validation failed:\n${validation.errors.join('\n')}`);
                }

                const formData = validation.data;

                // Build request configuration
                const requestConfig = this.buildRequestConfig(endpoint, formData);

                // Execute request
                const response = await this.executeRequest(requestConfig);

                // Display response
                this.displayResponse(response, endpoint);

                // Switch to response tab
                if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar.switchTab) {
                    APITesterSidebar.switchTab('response');
                }

                return response;

            } catch (error) {
                console.error('Request failed:', error);
                this.displayError(error, endpoint);

                if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar.switchTab) {
                    APITesterSidebar.switchTab('response');
                }
            } finally {
                // Restore button state
                if (sendBtn) {
                    sendBtn.innerHTML = originalText;
                    sendBtn.disabled = false;
                }
            }
        },

        // Build request configuration from form data
        buildRequestConfig(endpoint, formData) {
            // Build URL with path parameters
            let url = endpoint.path;
            for (const [key, value] of Object.entries(formData.pathParameters)) {
                url = url.replace(`{${key}}`, encodeURIComponent(value));
            }

            // Add query parameters
            const queryParams = new URLSearchParams(formData.queryParameters);
            if (queryParams.toString()) {
                url += '?' + queryParams.toString();
            }

            // Build request configuration
            const config = {
                method: endpoint.method,
                url: url,
                headers: {
                    'Content-Type': 'application/json'
                }
            };

            // Add request body for methods that support it
            if (['POST', 'PUT', 'PATCH'].includes(endpoint.method) &&
                Object.keys(formData.requestBody).length > 0) {
                config.body = JSON.stringify(formData.requestBody);
            }

            return config;
        },

        // Execute HTTP request
        async executeRequest(config) {
            const startTime = performance.now();

            const response = await fetch(config.url, {
                method: config.method,
                headers: config.headers,
                body: config.body
            });

            const endTime = performance.now();
            const duration = Math.round(endTime - startTime);

            // Parse response body
            let responseData;
            const contentType = response.headers.get('content-type');

            if (contentType && contentType.includes('application/json')) {
                try {
                    responseData = await response.json();
                } catch (e) {
                    responseData = await response.text();
                }
            } else {
                responseData = await response.text();
            }

            return {
                ok: response.ok,
                status: response.status,
                statusText: response.statusText,
                headers: Object.fromEntries(response.headers.entries()),
                data: responseData,
                duration: duration,
                url: config.url,
                method: config.method
            };
        },

        // Display successful response
        displayResponse(response, endpoint) {
            const container = document.getElementById('api-response-container');
            if (!container) return;

            const responseInfo = APISchemaManager.extractResponseInfo(endpoint);

            container.innerHTML = `
                <div class="api-response-success">
                    <div class="response-header">
                        <div class="response-status">
                            <span class="status-badge ${this.getStatusClass(response.status)}">
                                ${response.status} ${response.statusText}
                            </span>
                            <span class="response-time">${response.duration}ms</span>
                        </div>
                        <div class="response-url">
                            <strong>${response.method}</strong> ${response.url}
                        </div>
                    </div>

                    <div class="response-tabs">
                        <div class="tab-nav">
                            <button class="tab-btn active" data-tab="body">Response Body</button>
                            <button class="tab-btn" data-tab="headers">Headers</button>
                            ${responseInfo.hasSchema ? '<button class="tab-btn" data-tab="schema">Expected Schema</button>' : ''}
                        </div>

                        <div class="tab-content">
                            <div class="tab-panel active" data-panel="body">
                                <div class="response-body">
                                    <pre><code class="json">${this.formatJSON(response.data)}</code></pre>
                                </div>
                            </div>

                            <div class="tab-panel" data-panel="headers">
                                <div class="response-headers">
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Header</th>
                                                <th>Value</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${Object.entries(response.headers).map(([key, value]) => `
                                                <tr>
                                                    <td><code>${key}</code></td>
                                                    <td>${value}</td>
                                                </tr>
                                            `).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            ${responseInfo.hasSchema ? `
                                <div class="tab-panel" data-panel="schema">
                                    <div class="response-schema">
                                        <h6>Expected Response Schema:</h6>
                                        <pre><code class="json">${this.formatJSON(responseInfo.schema)}</code></pre>
                                        ${responseInfo.required.length > 0 ? `
                                            <div class="schema-info m-t-sm">
                                                <strong>Required fields:</strong> ${responseInfo.required.join(', ')}
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;

            this.initializeResponseTabs(container);
        },

        // Display error response
        displayError(error, endpoint) {
            const container = document.getElementById('api-response-container');
            if (!container) return;

            container.innerHTML = `
                <div class="api-response-error">
                    <div class="error-header">
                        <div class="error-icon">
                            <i class="ri-error-warning-line"></i>
                        </div>
                        <div class="error-title">Request Failed</div>
                    </div>

                    <div class="error-details">
                        <div class="error-message">
                            <strong>Error:</strong>
                            <pre>${error.message || 'Unknown error occurred'}</pre>
                        </div>

                        ${error.response ? `
                            <div class="error-response m-t-sm">
                                <strong>Response Details:</strong>
                                <div class="response-status">
                                    Status: <span class="status-badge status-error">
                                        ${error.response.status} ${error.response.statusText}
                                    </span>
                                </div>
                                ${error.response.data ? `
                                    <div class="response-body m-t-xs">
                                        <pre><code>${this.formatJSON(error.response.data)}</code></pre>
                                    </div>
                                ` : ''}
                            </div>
                        ` : ''}

                        <div class="error-help m-t-sm">
                            <h6>Troubleshooting Tips:</h6>
                            <ul class="list-unstyled">
                                <li><i class="ri-checkbox-circle-line"></i> Check that all required fields are filled</li>
                                <li><i class="ri-checkbox-circle-line"></i> Verify the endpoint URL and method</li>
                                <li><i class="ri-checkbox-circle-line"></i> Ensure authentication if required</li>
                                <li><i class="ri-checkbox-circle-line"></i> Check server logs for detailed errors</li>
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        },

        // Initialize response tab functionality
        initializeResponseTabs(container) {
            const tabBtns = container.querySelectorAll('.tab-btn');
            const tabPanels = container.querySelectorAll('.tab-panel');

            tabBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    const tabName = btn.getAttribute('data-tab');

                    // Update active states
                    tabBtns.forEach(b => b.classList.remove('active'));
                    tabPanels.forEach(p => p.classList.remove('active'));

                    btn.classList.add('active');
                    const panel = container.querySelector(`[data-panel="${tabName}"]`);
                    if (panel) {
                        panel.classList.add('active');
                    }
                });
            });
        },

        // Get CSS class for HTTP status code
        getStatusClass(status) {
            if (status >= 200 && status < 300) return 'status-success';
            if (status >= 300 && status < 400) return 'status-redirect';
            if (status >= 400 && status < 500) return 'status-client-error';
            if (status >= 500) return 'status-server-error';
            return 'status-unknown';
        },

        // Format JSON for display
        formatJSON(data) {
            if (!data) return 'No data';

            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                } catch (e) {
                    return data; // Return as-is if not valid JSON
                }
            }

            return JSON.stringify(data, null, 2);
        },

        // Build cURL command for the request
        generateCurlCommand(endpoint, formData) {
            const config = this.buildRequestConfig(endpoint, formData);

            let curl = `curl -X ${config.method}`;

            // Add headers
            Object.entries(config.headers).forEach(([key, value]) => {
                curl += ` -H "${key}: ${value}"`;
            });

            // Add body if present
            if (config.body) {
                curl += ` -d '${config.body}'`;
            }

            // Add URL (quote it to handle query parameters)
            curl += ` "${config.url}"`;

            return curl;
        },

        // Copy cURL command to clipboard
        copyCurlCommand(endpoint) {
            try {
                const validation = APIFormBuilder.validateForm(endpoint);
                if (!validation.valid) {
                    throw new Error('Form validation failed');
                }

                const curlCommand = this.generateCurlCommand(endpoint, validation.data);

                if (navigator.clipboard) {
                    navigator.clipboard.writeText(curlCommand).then(() => {
                        this.showToast('cURL command copied to clipboard!', 'success');
                    });
                } else {
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = curlCommand;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    this.showToast('cURL command copied to clipboard!', 'success');
                }
            } catch (error) {
                this.showToast('Failed to generate cURL command: ' + error.message, 'error');
            }
        },

        // Show toast notification
        showToast(message, type = 'info') {
            // Simple toast implementation
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 10px 15px;
                background: ${type === 'success' ? '#4caf50' : type === 'error' ? '#f44336' : '#2196f3'};
                color: white;
                border-radius: 4px;
                z-index: 1000;
                opacity: 0;
                transition: opacity 0.3s;
            `;

            document.body.appendChild(toast);

            // Fade in
            setTimeout(() => toast.style.opacity = '1', 10);

            // Fade out and remove
            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => document.body.removeChild(toast), 300);
            }, 3000);
        }
    };
{{end}}
