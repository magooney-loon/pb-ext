{{define "api_request_handler_js"}}
    // =============================================================================
    // SIMPLIFIED API REQUEST HANDLER - USES NEW OPENAPI SCHEMA MANAGER
    // =============================================================================

    const APIRequestHandler = {

        // Send HTTP request using simplified form data and OpenAPI schema
        async sendRequest(endpoint, authToken = null) {
            if (!endpoint) {
                console.error('No endpoint provided for request');
                this.showError('No endpoint selected for request');
                return;
            }

            const sendBtn = document.getElementById('send-request-btn');
            const originalBtnContent = sendBtn?.innerHTML || 'Send Request';

            try {
                // Update button state
                this.updateSendButton(sendBtn, true);

                // Collect and validate form data
                const formData = APIFormBuilder.collectFormData();
                const validation = APISchemaManager.validateRequestData(endpoint, formData);

                if (!validation.valid) {
                    throw new Error(`Validation failed:\n${validation.errors.join('\n')}`);
                }

                // Build request configuration
                const requestConfig = this.buildRequestConfig(endpoint, formData, authToken);

                // Log request details
                console.log('Sending request:', requestConfig.method, requestConfig.url);

                // Execute request
                const response = await this.executeRequest(requestConfig);

                // Display successful response
                this.displayResponse(response, endpoint);

                // Auto-switch to response tab
                if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar.switchTab) {
                    APITesterSidebar.switchTab('response');
                }

                return response;

            } catch (error) {
                console.error('Request failed:', error);
                this.displayError(error, endpoint);

                // Switch to response tab to show error
                if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar.switchTab) {
                    APITesterSidebar.switchTab('response');
                }
            } finally {
                // Restore button state
                this.updateSendButton(sendBtn, false, originalBtnContent);
            }
        },

        // Build request configuration from endpoint and form data
        buildRequestConfig(endpoint, formData, authToken) {
            // Build URL with path parameters
            const url = APISchemaManager.buildUrl(endpoint, formData.pathParams);

            // Prepare request body
            const body = APISchemaManager.prepareRequestBody(endpoint, formData);

            // Build headers
            const headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            };

            // Add authentication if required and available
            if (APISchemaManager.requiresAuth(endpoint)) {
                if (authToken) {
                    headers['Authorization'] = `Bearer ${authToken}`;
                } else {
                    // Try to get auth token from APILoader
                    const token = window.APILoader?.getSuperuserAuthToken();
                    if (token) {
                        headers['Authorization'] = `Bearer ${token}`;
                    } else {
                        console.warn('Authentication required but no token available');
                    }
                }
            }

            // Add query parameters to URL
            const finalUrl = this.addQueryParameters(url, formData.queryParams);

            return {
                method: endpoint.method.toUpperCase(),
                url: finalUrl,
                headers: headers,
                body: body ? JSON.stringify(body) : null
            };
        },

        // Execute the HTTP request
        async executeRequest(config) {
            const startTime = Date.now();

            const response = await fetch(config.url, {
                method: config.method,
                headers: config.headers,
                body: config.body
            });

            const endTime = Date.now();
            const duration = endTime - startTime;

            // Parse response data
            let responseData;
            const contentType = response.headers.get('content-type');

            if (contentType && contentType.includes('application/json')) {
                try {
                    responseData = await response.json();
                } catch (e) {
                    responseData = await response.text();
                }
            } else {
                responseData = await response.text();
            }

            // Return normalized response object
            return {
                ok: response.ok,
                status: response.status,
                statusText: response.statusText,
                headers: Object.fromEntries(response.headers.entries()),
                data: responseData,
                duration: duration,
                url: config.url,
                method: config.method
            };
        },

        // Add query parameters to URL
        addQueryParameters(url, queryParams) {
            if (!queryParams || Object.keys(queryParams).length === 0) {
                return url;
            }

            const urlObj = new URL(url, window.location.origin);
            Object.entries(queryParams).forEach(([key, value]) => {
                if (value !== null && value !== undefined && value !== '') {
                    urlObj.searchParams.append(key, String(value));
                }
            });

            return urlObj.pathname + urlObj.search;
        },

        // Display successful response
        displayResponse(response, endpoint) {
            this.updateStatus('success', `${response.status} ${response.statusText} (${response.duration}ms)`);

            // Update response status
            this.updateResponseStatus(response);

            // Display response body
            this.displayResponseBody(response);

            // Display response headers
            this.displayResponseHeaders(response);

            // Update request info
            this.updateRequestInfo(response, endpoint);
        },

        // Display error response
        displayError(error, endpoint) {
            console.error('Request error:', error);

            this.updateStatus('error', error.message);

            // Try to show error details in response area
            const errorResponse = {
                ok: false,
                status: 0,
                statusText: 'Request Failed',
                data: {
                    error: error.message,
                    timestamp: new Date().toISOString(),
                    endpoint: endpoint ? `${endpoint.method} ${endpoint.path}` : 'unknown'
                },
                headers: {},
                duration: 0
            };

            this.displayResponse(errorResponse, endpoint);
        },

        // Update response status display
        updateResponseStatus(response) {
            const statusEl = document.getElementById('response-status');
            if (statusEl) {
                const statusClass = response.ok ? 'success' : 'error';
                statusEl.className = `response-status ${statusClass}`;
                statusEl.innerHTML = `
                    <span class="status-code">${response.status}</span>
                    <span class="status-text">${response.statusText}</span>
                    <span class="duration">${response.duration}ms</span>
                `;
            }
        },

        // Display response body with syntax highlighting
        displayResponseBody(response) {
            const bodyEl = document.getElementById('response-body');
            if (!bodyEl) return;

            if (!response.data) {
                bodyEl.innerHTML = '<div class="txt-hint">No response body</div>';
                return;
            }

            // Use SchemaProcessor for syntax highlighting if available
            if (typeof SchemaProcessor !== 'undefined') {
                try {
                    const formatted = SchemaProcessor.syntaxHighlight(response.data, 'json');
                    bodyEl.innerHTML = `<pre><code>${formatted}</code></pre>`;
                } catch (e) {
                    // Fallback to plain text with escaping
                    const escaped = SchemaProcessor.escapeHtml(
                        typeof response.data === 'string' ?
                            response.data :
                            JSON.stringify(response.data, null, 2)
                    );
                    bodyEl.innerHTML = `<pre><code>${escaped}</code></pre>`;
                }
            } else {
                // Simple fallback
                const content = typeof response.data === 'string' ?
                    response.data :
                    JSON.stringify(response.data, null, 2);
                bodyEl.innerHTML = `<pre><code>${this.escapeHtml(content)}</code></pre>`;
            }
        },

        // Display response headers
        displayResponseHeaders(response) {
            const headersEl = document.getElementById('response-headers');
            if (!headersEl) return;

            if (!response.headers || Object.keys(response.headers).length === 0) {
                headersEl.innerHTML = '<div class="txt-hint">No response headers</div>';
                return;
            }

            // Use SchemaProcessor for formatting if available
            if (typeof SchemaProcessor !== 'undefined') {
                const formatted = SchemaProcessor.syntaxHighlight(response.headers, 'json');
                headersEl.innerHTML = `<pre><code>${formatted}</code></pre>`;
            } else {
                const content = JSON.stringify(response.headers, null, 2);
                headersEl.innerHTML = `<pre><code>${this.escapeHtml(content)}</code></pre>`;
            }
        },

        // Update request information display
        updateRequestInfo(response, endpoint) {
            const requestInfoEl = document.getElementById('request-info');
            if (requestInfoEl) {
                requestInfoEl.innerHTML = `
                    <div class="request-summary">
                        <div><strong>Method:</strong> ${response.method}</div>
                        <div><strong>URL:</strong> ${response.url}</div>
                        <div><strong>Status:</strong> ${response.status} ${response.statusText}</div>
                        <div><strong>Duration:</strong> ${response.duration}ms</div>
                    </div>
                `;
            }
        },

        // Update send button state
        updateSendButton(button, loading, originalContent = 'Send Request') {
            if (!button) return;

            if (loading) {
                button.disabled = true;
                button.innerHTML = '<i class="ri-loader-4-line ri-spin"></i> Sending...';
            } else {
                button.disabled = false;
                button.innerHTML = originalContent;
            }
        },

        // Update status message
        updateStatus(type, message) {
            if (typeof ErrorStatusManager !== 'undefined') {
                ErrorStatusManager.updateStatus(type, message);
            } else if (typeof StatusManager !== 'undefined') {
                StatusManager.updateStatus(type, message);
            } else {
                console.log(`[${type.toUpperCase()}] ${message}`);
            }
        },

        // Show error message
        showError(message) {
            this.updateStatus('error', message);
        },

        // Simple HTML escaping fallback
        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        },

        // Clear response display
        clearResponse() {
            const responseBody = document.getElementById('response-body');
            const responseHeaders = document.getElementById('response-headers');
            const responseStatus = document.getElementById('response-status');
            const requestInfo = document.getElementById('request-info');

            if (responseBody) responseBody.innerHTML = '<div class="txt-hint">No response yet</div>';
            if (responseHeaders) responseHeaders.innerHTML = '<div class="txt-hint">No headers yet</div>';
            if (responseStatus) {
                responseStatus.className = 'response-status';
                responseStatus.innerHTML = '<span class="txt-hint">Ready</span>';
            }
            if (requestInfo) requestInfo.innerHTML = '';
        },

        // Test endpoint with example data
        async testWithExample(endpoint) {
            if (!endpoint) return;

            // Populate form with example data
            if (APIFormBuilder.populateExampleData) {
                APIFormBuilder.populateExampleData(endpoint);
            }

            // Send request
            await this.sendRequest(endpoint);
        },

        // Get authentication token helper
        getAuthToken() {
            if (window.APILoader && window.APILoader.getSuperuserAuthToken) {
                return window.APILoader.getSuperuserAuthToken();
            }

            // Fallback: check localStorage directly
            try {
                const authData = localStorage.getItem('__pb_superuser_auth__');
                if (authData) {
                    const parsed = JSON.parse(authData);
                    return parsed.token;
                }
            } catch (e) {
                console.warn('Could not retrieve auth token:', e);
            }

            return null;
        }
    };

    // Export for global use
    if (typeof window !== 'undefined') {
        window.APIRequestHandler = APIRequestHandler;
    }

{{end}}
