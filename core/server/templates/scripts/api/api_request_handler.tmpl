{{define "api_request_handler_js"}}
    // =============================================================================
    // SIMPLIFIED API REQUEST HANDLER - USES NEW OPENAPI SCHEMA MANAGER
    // =============================================================================

    const APIRequestHandler = {

        // Send HTTP request using simplified form data and OpenAPI schema
        async sendRequest(endpoint, authToken = null) {
            if (!endpoint) {
                console.error('No endpoint provided for request');
                this.showError('No endpoint selected for request');
                return;
            }

            const sendBtn = document.getElementById('send-request-btn');
            const originalBtnContent = sendBtn?.innerHTML || 'Send Request';

            try {
                // Update button state
                this.updateSendButton(sendBtn, true);

                // Collect and validate form data
                const formData = APIFormBuilder.collectFormData();
                const validation = APISchemaManager.validateRequestData(endpoint, formData);

                if (!validation.valid) {
                    throw new Error(`Validation failed:\n${validation.errors.join('\n')}`);
                }

                // Build request configuration
                const requestConfig = this.buildRequestConfig(endpoint, formData, authToken);

                // Log request details
                console.log('Sending request:', requestConfig.method, requestConfig.url);

                // Execute request
                const response = await this.executeRequest(requestConfig);

                // Display successful response
                this.displayResponse(response, endpoint);

                // Auto-switch to response tab
                if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar.switchTab) {
                    APITesterSidebar.switchTab('response');
                }

                return response;

            } catch (error) {
                console.error('Request failed:', error);
                this.displayError(error, endpoint);

                // Switch to response tab to show error
                if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar.switchTab) {
                    APITesterSidebar.switchTab('response');
                }
            } finally {
                // Restore button state
                this.updateSendButton(sendBtn, false, originalBtnContent);
            }
        },

        // Build request configuration from endpoint and form data
        buildRequestConfig(endpoint, formData, authToken) {
            // Build URL with path parameters
            const url = APISchemaManager.buildUrl(endpoint, formData.pathParams);

            // Prepare request body
            const body = APISchemaManager.prepareRequestBody(endpoint, formData);

            // Build headers
            const headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            };

            // Add authentication if required and available
            if (APISchemaManager.requiresAuth(endpoint)) {
                if (authToken) {
                    headers['Authorization'] = `Bearer ${authToken}`;
                } else {
                    // Try to get auth token from APILoader
                    const token = window.APILoader?.getSuperuserAuthToken();
                    if (token) {
                        headers['Authorization'] = `Bearer ${token}`;
                    } else {
                        console.warn('Authentication required but no token available');
                    }
                }
            }

            // Add query parameters to URL
            const finalUrl = this.addQueryParameters(url, formData.queryParams);

            return {
                method: endpoint.method.toUpperCase(),
                url: finalUrl,
                headers: headers,
                body: body ? JSON.stringify(body) : null
            };
        },

        // Execute the HTTP request
        async executeRequest(config) {
            const startTime = Date.now();

            const response = await fetch(config.url, {
                method: config.method,
                headers: config.headers,
                body: config.body
            });

            const endTime = Date.now();
            const duration = endTime - startTime;

            // Parse response data
            let responseData;
            const contentType = response.headers.get('content-type');

            if (contentType && contentType.includes('application/json')) {
                try {
                    responseData = await response.json();
                } catch (e) {
                    responseData = await response.text();
                }
            } else {
                responseData = await response.text();
            }

            // Return normalized response object
            return {
                ok: response.ok,
                status: response.status,
                statusText: response.statusText,
                headers: Object.fromEntries(response.headers.entries()),
                data: responseData,
                duration: duration,
                url: config.url,
                method: config.method
            };
        },

        // Add query parameters to URL
        addQueryParameters(url, queryParams) {
            if (!queryParams || Object.keys(queryParams).length === 0) {
                return url;
            }

            const urlObj = new URL(url, window.location.origin);
            Object.entries(queryParams).forEach(([key, value]) => {
                if (value !== null && value !== undefined && value !== '') {
                    urlObj.searchParams.append(key, String(value));
                }
            });

            return urlObj.pathname + urlObj.search;
        },

        // Display successful response
        displayResponse(response, endpoint) {
            console.log('Displaying response:', response.status, response.statusText);
            this.updateStatus('success', `${response.status} ${response.statusText} (${response.duration}ms)`);

            // Hide empty state and show response content
            const emptyState = document.getElementById('response-empty-state');
            const responseBody = document.getElementById('response-body');
            const responseHeaders = document.getElementById('response-headers');
            const copyBtn = document.getElementById('copy-response-btn');

            console.log('Found elements:', {
                emptyState: !!emptyState,
                responseBody: !!responseBody,
                responseHeaders: !!responseHeaders,
                copyBtn: !!copyBtn
            });

            if (emptyState) emptyState.style.display = 'none';
            if (copyBtn) copyBtn.style.display = 'inline-block';

            // Update response status
            this.updateResponseStatus(response);

            // Display response body and headers content
            this.displayResponseBody(response);
            this.displayResponseHeaders(response);

            // Show the appropriate tab based on current selection, default to body
            const activeResponseTab = document.querySelector('.response-tab.active');
            const currentTab = activeResponseTab ? activeResponseTab.dataset.tab : 'body';
            console.log('Current response tab:', currentTab);

            if (currentTab === 'body') {
                if (responseBody) {
                    responseBody.style.display = 'block';
                    responseBody.classList.add('active');
                }
                if (responseHeaders) {
                    responseHeaders.style.display = 'none';
                    responseHeaders.classList.remove('active');
                }
            } else {
                if (responseBody) {
                    responseBody.style.display = 'none';
                    responseBody.classList.remove('active');
                }
                if (responseHeaders) {
                    responseHeaders.style.display = 'block';
                    responseHeaders.classList.add('active');
                }
            }

            // Update request info
            this.updateRequestInfo(response, endpoint);

            // Notify sidebar if it exists
            if (typeof APITesterSidebar !== 'undefined' && APITesterSidebar._switchResponseTab) {
                APITesterSidebar._switchResponseTab(currentTab);
            }
        },

        // Display error response
        displayError(error, endpoint) {
            console.error('Request error:', error);

            this.updateStatus('error', error.message);

            // Try to show error details in response area
            const errorResponse = {
                ok: false,
                status: 0,
                statusText: 'Request Failed',
                data: {
                    error: error.message,
                    timestamp: new Date().toISOString(),
                    endpoint: endpoint ? `${endpoint.method} ${endpoint.path}` : 'unknown'
                },
                headers: {},
                duration: 0
            };

            this.displayResponse(errorResponse, endpoint);
        },

        // Update response status display
        updateResponseStatus(response) {
            const statusEl = document.getElementById('response-status-info');
            if (statusEl) {
                const statusClass = response.ok ? 'success' : 'error';
                statusEl.className = `response-status ${statusClass}`;
                statusEl.innerHTML = `
                    <span class="status-code">${response.status}</span>
                    <span class="status-text">${response.statusText}</span>
                    <span class="duration">${response.duration}ms</span>
                `;
            }
        },

        // Display response body with syntax highlighting
        displayResponseBody(response) {
            console.log('Displaying response body...', !!response.data);
            const bodyEl = document.getElementById('response-body');
            if (!bodyEl) {
                console.warn('Response body element not found');
                return;
            }

            // Find the existing code element in the sidebar structure
            const codeEl = bodyEl.querySelector('code');
            if (!codeEl) {
                console.warn('Code element not found in response-body, creating one...');
                // Create the structure if it doesn't exist
                bodyEl.innerHTML = '<pre class="code-block"><code></code></pre>';
                const newCodeEl = bodyEl.querySelector('code');
                if (!newCodeEl) {
                    console.error('Failed to create code element');
                    return;
                }
            }

            const finalCodeEl = bodyEl.querySelector('code');
            if (!response.data) {
                finalCodeEl.textContent = 'No response body';
                console.log('No response data to display');
                return;
            }

            // Use SchemaProcessor for syntax highlighting if available
            if (typeof SchemaProcessor !== 'undefined') {
                try {
                    const formatted = SchemaProcessor.syntaxHighlight(response.data, 'json');
                    finalCodeEl.innerHTML = formatted;
                    console.log('Applied syntax highlighting to response body');
                } catch (e) {
                    console.warn('Syntax highlighting failed, using plain text:', e);
                    // Fallback to plain text with escaping
                    const content = typeof response.data === 'string' ?
                        response.data :
                        JSON.stringify(response.data, null, 2);
                    finalCodeEl.textContent = content;
                }
            } else {
                console.log('SchemaProcessor not available, using plain text');
                // Simple fallback
                const content = typeof response.data === 'string' ?
                    response.data :
                    JSON.stringify(response.data, null, 2);
                finalCodeEl.textContent = content;
            }
        },

        // Display response headers
        displayResponseHeaders(response) {
            console.log('Displaying response headers...', Object.keys(response.headers || {}).length);
            const headersEl = document.getElementById('response-headers');
            if (!headersEl) {
                console.warn('Response headers element not found');
                return;
            }

            // Find the existing code element in the sidebar structure
            const codeEl = headersEl.querySelector('code');
            if (!codeEl) {
                console.warn('Code element not found in response-headers, creating one...');
                // Create the structure if it doesn't exist
                headersEl.innerHTML = '<pre class="code-block"><code></code></pre>';
                const newCodeEl = headersEl.querySelector('code');
                if (!newCodeEl) {
                    console.error('Failed to create headers code element');
                    return;
                }
            }

            const finalCodeEl = headersEl.querySelector('code');
            if (!response.headers || Object.keys(response.headers).length === 0) {
                finalCodeEl.textContent = 'No response headers';
                console.log('No response headers to display');
                return;
            }

            // Use SchemaProcessor for formatting if available
            if (typeof SchemaProcessor !== 'undefined') {
                try {
                    const formatted = SchemaProcessor.syntaxHighlight(response.headers, 'json');
                    finalCodeEl.innerHTML = formatted;
                    console.log('Applied syntax highlighting to response headers');
                } catch (e) {
                    console.warn('Headers syntax highlighting failed:', e);
                    const content = JSON.stringify(response.headers, null, 2);
                    finalCodeEl.textContent = content;
                }
            } else {
                console.log('SchemaProcessor not available for headers, using plain text');
                const content = JSON.stringify(response.headers, null, 2);
                finalCodeEl.textContent = content;
            }
        },

        // Update request information display
        updateRequestInfo(response, endpoint) {
            const requestInfoEl = document.getElementById('request-info');
            if (requestInfoEl) {
                requestInfoEl.innerHTML = `
                    <div class="request-summary">
                        <div><strong>Method:</strong> ${response.method}</div>
                        <div><strong>URL:</strong> ${response.url}</div>
                        <div><strong>Status:</strong> ${response.status} ${response.statusText}</div>
                        <div><strong>Duration:</strong> ${response.duration}ms</div>
                    </div>
                `;
            }
        },

        // Update send button state
        updateSendButton(button, loading, originalContent = 'Send Request') {
            if (!button) return;

            if (loading) {
                button.disabled = true;
                button.innerHTML = '<i class="ri-loader-4-line ri-spin"></i> Sending...';
            } else {
                button.disabled = false;
                button.innerHTML = originalContent;
            }
        },

        // Update status message
        updateStatus(type, message) {
            if (typeof ErrorStatusManager !== 'undefined') {
                ErrorStatusManager.updateStatus(type, message);
            } else if (typeof StatusManager !== 'undefined') {
                StatusManager.updateStatus(type, message);
            } else {
                console.log(`[${type.toUpperCase()}] ${message}`);
            }
        },

        // Show error message
        showError(message) {
            this.updateStatus('error', message);
        },

        // Simple HTML escaping fallback
        escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        },

        // Clear response display
        clearResponse() {
            console.log('Clearing response display...');
            const responseBody = document.getElementById('response-body');
            const responseHeaders = document.getElementById('response-headers');
            const responseStatus = document.getElementById('response-status-info');
            const requestInfo = document.getElementById('request-info');
            const emptyState = document.getElementById('response-empty-state');
            const copyBtn = document.getElementById('copy-response-btn');

            console.log('Clearing elements:', {
                responseBody: !!responseBody,
                responseHeaders: !!responseHeaders,
                responseStatus: !!responseStatus,
                requestInfo: !!requestInfo,
                emptyState: !!emptyState,
                copyBtn: !!copyBtn
            });

            // Show empty state and hide response content
            if (emptyState) emptyState.style.display = 'block';
            if (responseBody) {
                responseBody.style.display = 'none';
                responseBody.classList.remove('active');
            }
            if (responseHeaders) {
                responseHeaders.style.display = 'none';
                responseHeaders.classList.remove('active');
            }
            if (copyBtn) copyBtn.style.display = 'none';

            if (responseBody) {
                const bodyCodeEl = responseBody.querySelector('code');
                if (bodyCodeEl) {
                    bodyCodeEl.textContent = '';
                    console.log('Cleared response body content');
                }
            }
            if (responseHeaders) {
                const headersCodeEl = responseHeaders.querySelector('code');
                if (headersCodeEl) {
                    headersCodeEl.textContent = '';
                    console.log('Cleared response headers content');
                }
            }
            if (responseStatus) {
                responseStatus.className = 'response-status';
                responseStatus.innerHTML = '<span class="status-badge status-ready">Ready</span><span class="response-time">Send a request</span>';
            }
            if (requestInfo) requestInfo.innerHTML = '';

            // Reset response tabs to default (body)
            const responseTabs = document.querySelectorAll('.response-tab');
            responseTabs.forEach(tab => {
                tab.classList.toggle('active', tab.dataset.tab === 'body');
            });

            console.log('Response display cleared successfully');
        },

        // Test endpoint with example data
        async testWithExample(endpoint) {
            if (!endpoint) return;

            // Populate form with example data
            if (APIFormBuilder.populateExampleData) {
                APIFormBuilder.populateExampleData(endpoint);
            }

            // Send request
            await this.sendRequest(endpoint);
        },

        // Get authentication token helper
        getAuthToken() {
            if (window.APILoader && window.APILoader.getSuperuserAuthToken) {
                return window.APILoader.getSuperuserAuthToken();
            }

            // Fallback: check localStorage directly
            try {
                const authData = localStorage.getItem('__pb_superuser_auth__');
                if (authData) {
                    const parsed = JSON.parse(authData);
                    return parsed.token;
                }
            } catch (e) {
                console.warn('Could not retrieve auth token:', e);
            }

            return null;
        }
    };

    // Export for global use
    if (typeof window !== 'undefined') {
        window.APIRequestHandler = APIRequestHandler;
    }

{{end}}
