{{define "api_tab_controller_js"}}
    // =============================================================================
    // UI CONTROLLERS - TAB MANAGEMENT
    // =============================================================================

    const TabController = {
        currentTab: 'endpoints',
        isTabSwitching: false,

        init() {
            document.querySelectorAll('#api-tabs .tab-item').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    this.switchTab(e.target);
                });
            });

            // Ensure a default tab is always selected
            this.initializeDefaultTab();
        },

        initializeDefaultTab() {
            // Check if any tab is currently active
            const activeButton = document.querySelector('#api-tabs .tab-item.active');
            const activeContent = document.querySelector('.tab-content.active');

            if (!activeButton || !activeContent) {
                // No active tab found, activate the default one
                const defaultButton = document.querySelector('#api-tabs .tab-item[data-tab="endpoints"]');
                const defaultContent = document.getElementById('endpoints-tab');

                if (defaultButton && defaultContent) {
                    // Clear any existing active states
                    document.querySelectorAll('#api-tabs .tab-item').forEach(btn => btn.classList.remove('active'));
                    document.querySelectorAll('.tab-content').forEach(content => {
                        content.classList.remove('active');
                        content.style.display = 'none';
                    });

                    // Activate default tab
                    defaultButton.classList.add('active');
                    defaultContent.classList.add('active');
                    defaultContent.style.display = 'block';

                    this.currentTab = 'endpoints';
                }
            }
        },

        switchTab(button) {
            // Prevent rapid tab switching
            if (this.isTabSwitching) return;

            const tabName = button.getAttribute('data-tab');
            if (!tabName) {
                console.error('Tab button missing data-tab attribute');
                return;
            }

            if (tabName === this.currentTab) return;

            this.isTabSwitching = true;

            // Find target content first - if it doesn't exist, abort
            const targetContent = document.getElementById(`${tabName}-tab`);
            if (!targetContent) {
                console.error(`Tab content not found: ${tabName}-tab`);
                this.isTabSwitching = false;
                return;
            }

            // Store current active button for fallback
            const currentActiveButton = document.querySelector('#api-tabs .tab-item.active');

            try {
                // Update button states - only remove active after confirming target exists
                document.querySelectorAll('#api-tabs .tab-item').forEach(btn =>
                    btn.classList.remove('active'));
                button.classList.add('active');

                // Hide all content
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                    content.style.display = 'none';
                });

                // Use requestAnimationFrame to ensure DOM updates are complete
                requestAnimationFrame(() => {
                    try {
                        targetContent.style.display = 'block';

                        // Force reflow to ensure display change is applied
                        targetContent.offsetHeight;

                        targetContent.classList.add('active');

                        // Verify the switch was successful
                        setTimeout(() => {
                            if (targetContent.style.display !== 'block' || !targetContent.classList.contains('active')) {
                                console.warn(`Tab content not properly displayed, fixing: ${tabName}`);
                                targetContent.style.display = 'block';
                                targetContent.classList.add('active');
                            }

                            // Update current tab and refresh content
                            this.currentTab = tabName;
                            this.refreshTabContent(tabName);

                            // Allow tab switching again
                            this.isTabSwitching = false;
                        }, 50);

                    } catch (error) {
                        console.error('Error showing tab content:', error);
                        this.recoverFromTabSwitchError(currentActiveButton, this.currentTab);
                    }
                });

            } catch (error) {
                console.error('Error switching tabs:', error);
                this.recoverFromTabSwitchError(currentActiveButton, this.currentTab);
            }
        },

        recoverFromTabSwitchError(fallbackButton, fallbackTabName) {
            console.warn('Recovering from tab switch error');

            // Restore previous active button
            document.querySelectorAll('#api-tabs .tab-item').forEach(btn =>
                btn.classList.remove('active'));

            if (fallbackButton) {
                fallbackButton.classList.add('active');
            } else {
                // Fallback to endpoints tab
                const endpointsButton = document.querySelector('#api-tabs .tab-item[data-tab="endpoints"]');
                if (endpointsButton) {
                    endpointsButton.classList.add('active');
                    fallbackTabName = 'endpoints';
                }
            }

            // Show the fallback content
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
                content.style.display = 'none';
            });

            const fallbackContent = document.getElementById(`${fallbackTabName}-tab`);
            if (fallbackContent) {
                fallbackContent.style.display = 'block';
                fallbackContent.classList.add('active');
            }

            this.isTabSwitching = false;
        },

        refreshTabContent(tabName) {
            switch (tabName) {
                case 'raw':
                    // Refresh raw schema content
                    const rawContent = document.getElementById('raw-schema-content');
                    if (APIState.openApiSchema) {
                        const formatBtn = document.querySelector('#raw-tab .btn.active');
                        const format = formatBtn?.getAttribute('data-format') || 'json';
                        APILoader.updateRawSchema(format);
                    } else if (rawContent && (rawContent.textContent === 'Loading schema...' || !rawContent.textContent.trim())) {
                        rawContent.textContent = 'No schema data available. Try refreshing the page.';
                    }
                    break;

                case 'components':
                    // Refresh components content
                    const componentsContent = document.getElementById('components-content');
                    if (APIState.apiComponents && Object.keys(APIState.apiComponents).length > 0) {
                        const formatBtn = document.querySelector('#components-tab .btn.active');
                        const format = formatBtn?.getAttribute('data-format') || 'json';
                        APILoader.updateComponents(format);
                    } else if (componentsContent && (componentsContent.textContent === 'Loading components...' || !componentsContent.textContent.trim())) {
                        componentsContent.textContent = 'No components available in this API schema.';
                    }
                    break;

                case 'endpoints':
                    // Refresh endpoints if needed
                    const endpointsList = document.getElementById('endpoints-list');
                    if (APIState.filteredEndpoints.length === 0 && APIState.allEndpoints.length > 0) {
                        EndpointRenderer.render();
                    } else if (endpointsList && APIState.allEndpoints.length === 0 && endpointsList.innerHTML.includes('Loading')) {
                        endpointsList.innerHTML = `
                            <div class="txt-center txt-hint p-4">
                                <i class="ri-route-line ri-2x mb-2"></i>
                                <h4>No endpoints available</h4>
                                <p class="txt-sm">No API endpoints have been discovered yet.</p>
                            </div>
                        `;
                    }
                    break;
            }
        }
    };
{{end}}
