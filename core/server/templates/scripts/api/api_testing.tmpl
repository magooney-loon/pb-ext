{{define "api_testing_js"}}
    // =============================================================================
    // API TESTING MANAGEMENT - CONSOLIDATED TESTER, SIDEBAR, FORM BUILDER & HANDLER
    // =============================================================================

    const APITestingManager = {
        // Testing state
        _currentEndpoint: null,
        _activeRequest: null,
        _testHistory: [],
        _initialized: false,
        _eventCleanup: [],

        // Initialize testing manager
        init() {
            if (this._initialized) return;

            try {
                this._setupEventListeners();
                this._setupSidebar();
                this._setupFormHandlers();
                this._initialized = true;

                EventBus.emit(APIEvents.TEST.STARTED, {
                    component: 'APITestingManager',
                    initialized: true
                });

            } catch (error) {
                ErrorManager.handleError(error, 'APITestingManager Initialization');
            }
        },

        // =============================================================================
        // SIDEBAR MANAGEMENT
        // =============================================================================

        // Open testing sidebar with endpoint
        openSidebar(endpoint, emitEvent = true) {
            try {
                this._currentEndpoint = endpoint;
                StateManager.setState('testing.activeTest', endpoint);

                // Show sidebar
                const sidebar = document.getElementById('api-tester-sidebar');
                if (sidebar) {
                    sidebar.classList.add('open');
                }

                // Reset sidebar to defaults first
                this.resetToDefaults();

                // Setup sidebar UI (close button, tabs, etc.)
                this._setupSidebar();

                // Build form for endpoint
                this._buildTestForm(endpoint);

                // Update URL display
                this._updateUrlDisplay(endpoint);

                // Only emit event if not called from event listener (prevents infinite loop)
                if (emitEvent) {
                    EventBus.emit(APIEvents.UI.SIDEBAR_OPENED, {
                        type: 'testing',
                        endpoint: endpoint
                    });
                }

            } catch (error) {
                ErrorManager.handleError(error, 'Opening Test Sidebar');
            }
        },

        // Close testing sidebar
        closeSidebar() {
            try {
                const sidebar = document.getElementById('api-tester-sidebar');
                if (sidebar) {
                    sidebar.classList.remove('open');
                }

                this.cleanup();
                this._currentEndpoint = null;
                StateManager.setState('testing.activeTest', null);

                EventBus.emit(APIEvents.UI.SIDEBAR_CLOSED, {
                    type: 'testing'
                });

            } catch (error) {
                ErrorManager.handleError(error, 'Closing Test Sidebar');
            }
        },

        // =============================================================================
        // FORM BUILDING
        // =============================================================================

        // Build test form for endpoint
        _buildTestForm(endpoint) {
            const container = document.getElementById('schema-form-container');
            if (!container) return;

            const sections = [];

            // Always add optional query parameters section at the top
            sections.push(this._buildOptionalQuerySection());

            // Build path parameters section
            const pathParams = APIDataManager.extractPathParameters(endpoint);
            if (pathParams.length > 0) {
                sections.push(this._buildPathParametersSection(pathParams));
            }

            // Build query parameters section
            if (endpoint.parameters) {
                const queryParams = endpoint.parameters.filter(p => p.in === 'query');
                if (queryParams.length > 0) {
                    sections.push(this._buildQueryParametersSection(queryParams));
                }
            }

            // Build headers section
            if (endpoint.parameters) {
                const headerParams = endpoint.parameters.filter(p => p.in === 'header');
                if (headerParams.length > 0) {
                    sections.push(this._buildHeadersSection(headerParams));
                }
            }

            // Build request body section
            const requestFields = APIDataManager.extractRequestFields(endpoint);
            if (requestFields.length > 0) {
                sections.push(this._buildRequestBodySection(requestFields, endpoint));
            }

            if (sections.length === 0) {
                container.innerHTML = `
                    <div class="empty-fields-state">
                        <i class="ri-inbox-line"></i>
                        <p>No parameters required</p>
                        <p class="txt-sm txt-hint">This endpoint doesn't require any parameters.</p>
                    </div>
                `;
            } else {
                container.innerHTML = sections.join('');
            }

            // Attach form event listeners
            this._attachFormListeners(container);
        },

        // Build optional query parameters section (always shown)
        _buildOptionalQuerySection() {
            return `
                <div class="form-section">
                    <h6 class="section-title">
                        <i class="ri-add-line"></i>
                        Optional Query Parameters
                    </h6>
                    <div class="query-params-container">
                        <div class="query-param-row" id="query-param-template" style="display: none;">
                            <input type="text" class="form-control query-param-name" placeholder="Parameter name">
                            <input type="text" class="form-control query-param-value" placeholder="Value">
                            <button type="button" class="btn btn-xs btn-secondary remove-param-btn">
                                <i class="ri-close-line"></i>
                            </button>
                        </div>
                        <div id="query-params-list"></div>
                        <button type="button" class="btn btn-xs btn-secondary add-query-param-btn">
                            <i class="ri-add-line"></i>
                            Add Query Parameter
                        </button>
                    </div>
                </div>
            `;
        },

        // Build path parameters section
        _buildPathParametersSection(pathParams) {
            const fields = pathParams.map(param => `
                <div class="form-field">
                    <label for="path_${param.name}" class="form-label">
                        ${param.name}
                        ${param.required ? '<span class="txt-danger">*</span>' : ''}
                    </label>
                    <input type="text"
                           id="path_${param.name}"
                           name="pathParams[${param.name}]"
                           class="form-control"
                           placeholder="${param.description || `Enter ${param.name}`}"
                           ${param.required ? 'required' : ''}>
                    ${param.description ? `<small class="form-help">${param.description}</small>` : ''}
                </div>
            `).join('');

            return `
                <div class="form-section">
                    <h4 class="form-section-title">Path Parameters</h4>
                    ${fields}
                </div>
            `;
        },

        // Build query parameters section
        _buildQueryParametersSection(queryParams) {
            const fields = queryParams.map(param => `
                <div class="form-field">
                    <label for="query_${param.name}" class="form-label">
                        ${param.name}
                        ${param.required ? '<span class="txt-danger">*</span>' : ''}
                    </label>
                    <input type="text"
                           id="query_${param.name}"
                           name="queryParams[${param.name}]"
                           class="form-control"
                           placeholder="${param.description || `Enter ${param.name}`}"
                           ${param.required ? 'required' : ''}>
                    ${param.description ? `<small class="form-help">${param.description}</small>` : ''}
                </div>
            `).join('');

            return `
                <div class="form-section">
                    <h4 class="form-section-title">Query Parameters</h4>
                    ${fields}
                </div>
            `;
        },

        // Build headers section
        _buildHeadersSection(headerParams) {
            const fields = headerParams.map(param => `
                <div class="form-field">
                    <label for="header_${param.name}" class="form-label">
                        ${param.name}
                        ${param.required ? '<span class="txt-danger">*</span>' : ''}
                    </label>
                    <input type="text"
                           id="header_${param.name}"
                           name="headers[${param.name}]"
                           class="form-control"
                           placeholder="${param.description || `Enter ${param.name}`}"
                           ${param.required ? 'required' : ''}>
                    ${param.description ? `<small class="form-help">${param.description}</small>` : ''}
                </div>
            `).join('');

            return `
                <div class="form-section">
                    <h4 class="form-section-title">Headers</h4>
                    ${fields}
                </div>
            `;
        },

        // Build request body section
        _buildRequestBodySection(requestFields, endpoint) {
            const contentType = 'application/json';

            let bodyInput;
            if (contentType.includes('application/json')) {
                // JSON body - show as textarea for manual editing or build form fields
                bodyInput = `
                    <div class="form-field">
                        <label class="form-label">Request Body (JSON)</label>
                        <textarea id="request-body"
                                  name="requestBody"
                                  class="form-control code-input"
                                  rows="8"
                                  placeholder='{\n  "key": "value"\n}'
                                  style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 13px;"></textarea>
                        <div class="form-actions mt-2">
                            <button type="button" class="btn btn-xs btn-outline load-example-btn">
                                Load Example
                            </button>
                            <button type="button" class="btn btn-xs btn-outline format-json-btn">
                                Format JSON
                            </button>
                        </div>
                    </div>
                `;
            } else {
                // Form fields for other content types
                const fields = requestFields.map(field => `
                    <div class="form-field">
                        <label for="body_${field.name}" class="form-label">
                            ${field.name}
                            ${field.required ? '<span class="txt-danger">*</span>' : ''}
                        </label>
                        <input type="text"
                               id="body_${field.name}"
                               name="requestBody[${field.name}]"
                               class="form-control"
                               placeholder="${field.description || field.example || `Enter ${field.name}`}"
                               ${field.required ? 'required' : ''}>
                        ${field.description ? `<small class="form-help">${field.description}</small>` : ''}
                    </div>
                `).join('');

                bodyInput = fields;
            }

            return `
                <div class="form-section">
                    <h4 class="form-section-title">Request Body</h4>
                    <div class="mb-2">
                        <span class="badge badge-sm">${contentType}</span>
                    </div>
                    ${bodyInput}
                </div>
            `;
        },

        // Build authentication section
        _buildAuthSection(auth) {
            return `
                <div class="form-section">
                    <h4 class="form-section-title">Authentication</h4>
                    <div class="auth-info mb-2">
                        <span class="auth-icon">${auth.icon}</span>
                        <span class="txt-sm">${auth.description}</span>
                        <span class="badge badge-sm">${auth.type}</span>
                    </div>
                    <div class="form-field">
                        <label for="auth-token" class="form-label">Authorization Token</label>
                        <input type="password"
                               id="auth-token"
                               name="authToken"
                               class="form-control"
                               placeholder="Enter authorization token">
                        <small class="form-help">Leave empty to use current session token</small>
                    </div>
                </div>
            `;
        },

        // Load example body data
        loadExampleBody() {
            if (!this._currentEndpoint) return;

            const example = APIDataManager.getExampleRequest(this._currentEndpoint);
            if (example?.body) {
                const textarea = document.getElementById('request-body');
                if (textarea) {
                    textarea.value = JSON.stringify(example.body, null, 2);
                }
            }
        },

        // Format JSON in body textarea
        formatJsonBody() {
            const textarea = document.getElementById('request-body');
            if (!textarea) return;

            try {
                const json = JSON.parse(textarea.value);
                textarea.value = JSON.stringify(json, null, 2);
            } catch (error) {
                ErrorManager.handleError(error, 'JSON Formatting');
            }
        },

        // =============================================================================
        // REQUEST HANDLING
        // =============================================================================

        // Send test request
        async sendRequest() {
            if (!this._currentEndpoint) {
                ErrorManager.handleError(new Error('No endpoint selected'), 'Send Request');
                return;
            }

            try {
                // Collect form data
                const formData = this._collectFormData();

                // Validate request
                const validation = APIDataManager.validateRequestData(this._currentEndpoint, formData);
                if (!validation.valid) {
                    throw new Error(`Validation failed: ${validation.errors.join(', ')}`);
                }

                // Show loading state
                this._setLoadingState(true);

                // Build request configuration
                const requestConfig = this._buildRequestConfig(this._currentEndpoint, formData);

                // Execute request
                const result = await this._executeRequest(requestConfig);

                // Store result in history
                this._addToHistory(requestConfig, result);

                // Display result
                this._displayResult(result);

                EventBus.emit(APIEvents.TEST.COMPLETED, {
                    endpoint: this._currentEndpoint,
                    result: result
                });

            } catch (error) {
                ErrorManager.handleError(error, 'API Test Request');
                this._displayError(error);

                EventBus.emit(APIEvents.TEST.FAILED, {
                    endpoint: this._currentEndpoint,
                    error: error.message
                });
            } finally {
                this._setLoadingState(false);
            }
        },

        // Collect form data
        _collectFormData() {
            const form = document.getElementById('api-test-form');
            if (!form) return {};

            const formData = new FormData(form);
            const data = {
                pathParams: {},
                queryParams: {},
                headers: {},
                requestBody: {},
                authToken: formData.get('authToken') || null
            };

            // Parse form data into structured format
            for (const [key, value] of formData.entries()) {
                if (key.startsWith('pathParams[')) {
                    const paramName = key.match(/\[([^\]]+)\]/)[1];
                    data.pathParams[paramName] = value;
                } else if (key.startsWith('queryParams[')) {
                    const paramName = key.match(/\[([^\]]+)\]/)[1];
                    data.queryParams[paramName] = value;
                } else if (key.startsWith('headers[')) {
                    const headerName = key.match(/\[([^\]]+)\]/)[1];
                    data.headers[headerName] = value;
                } else if (key.startsWith('requestBody[')) {
                    const fieldName = key.match(/\[([^\]]+)\]/)[1];
                    data.requestBody[fieldName] = value;
                } else if (key === 'requestBody') {
                    // Handle JSON body
                    try {
                        data.requestBody = value ? JSON.parse(value) : null;
                    } catch (error) {
                        data.requestBody = value; // Keep as string if not valid JSON
                    }
                }
            }

            return data;
        },

        // Build request configuration
        _buildRequestConfig(endpoint, formData) {
            // Build URL with path parameters
            const baseUrl = window.location.origin;
            let url = APIDataManager.buildUrl(endpoint, formData.pathParams);

            // Add query parameters
            if (Object.keys(formData.queryParams).length > 0) {
                const queryString = new URLSearchParams(formData.queryParams).toString();
                url += (url.includes('?') ? '&' : '?') + queryString;
            }

            // Prepare request body
            const body = APIDataManager.prepareRequestBody(endpoint, formData);

            // Build headers
            const headers = {
                ...formData.headers
            };

            // Add content type if body exists
            if (body && endpoint.request) {
                headers['Content-Type'] = 'application/json';
            }

            // Add authentication if provided
            const authToken = formData.authToken || APIDataManager.getAuthToken();
            if (authToken && APIDataManager.requiresAuth(endpoint)) {
                headers['Authorization'] = `Bearer ${authToken}`;
            }

            return {
                method: endpoint.method.toUpperCase(),
                url: baseUrl + url,
                headers: headers,
                body: body,
                endpoint: endpoint,
                timestamp: new Date().toISOString()
            };
        },

        // Execute HTTP request
        async _executeRequest(config) {
            const startTime = Date.now();

            try {
                const fetchOptions = {
                    method: config.method,
                    headers: config.headers
                };

                if (config.body && config.method !== 'GET' && config.method !== 'HEAD') {
                    fetchOptions.body = config.body;
                }

                const response = await fetch(config.url, fetchOptions);
                const endTime = Date.now();

                // Parse response
                let responseData;
                const contentType = response.headers.get('Content-Type') || '';

                if (contentType.includes('application/json')) {
                    responseData = await response.json();
                } else {
                    responseData = await response.text();
                }

                return {
                    success: true,
                    status: response.status,
                    statusText: response.statusText,
                    headers: Object.fromEntries(response.headers.entries()),
                    data: responseData,
                    duration: endTime - startTime,
                    timestamp: config.timestamp
                };

            } catch (error) {
                const endTime = Date.now();

                return {
                    success: false,
                    error: error.message,
                    duration: endTime - startTime,
                    timestamp: config.timestamp
                };
            }
        },

        // Display request result
        _displayResult(result) {
            const container = document.getElementById('api-test-result');
            if (!container) return;

            if (result.success) {
                container.innerHTML = `
                    <div class="result-section">
                        <div class="result-header">
                            <h4>Response</h4>
                            <div class="result-meta">
                                <span class="http-status status-${result.status}">${result.status} ${result.statusText}</span>
                                <span class="duration">${result.duration}ms</span>
                            </div>
                        </div>

                        <div class="result-content">
                            <div class="result-tabs">
                                <button class="result-tab active" data-tab="body">Response Body</button>
                                <button class="result-tab" data-tab="headers">Headers</button>
                            </div>

                            <div class="result-body active" data-content="body">
                                <div class="code-block">
                                    ${APIDataManager.formatSchemaForDisplay(result.data)}
                                </div>
                                <button class="btn btn-xs btn-outline mt-2" onclick="APITestingManager.copyResponse()">
                                    <i class="ri-file-copy-line"></i> Copy Response
                                </button>
                            </div>

                            <div class="result-body" data-content="headers">
                                <div class="code-block">
                                    <pre><code>${JSON.stringify(result.headers, null, 2)}</code></pre>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                container.innerHTML = `
                    <div class="result-section">
                        <div class="result-header error">
                            <h4>Request Failed</h4>
                            <span class="duration">${result.duration}ms</span>
                        </div>
                        <div class="result-content">
                            <div class="alert alert-danger">
                                <strong>Error:</strong> ${result.error}
                            </div>
                        </div>
                    </div>
                `;
            }

            // Setup result tab switching
            this._setupResultTabs();
        },

        // Display error
        _displayError(error) {
            const container = document.getElementById('api-test-result');
            if (!container) return;

            container.innerHTML = `
                <div class="result-section">
                    <div class="result-header error">
                        <h4>Request Failed</h4>
                    </div>
                    <div class="result-content">
                        <div class="alert alert-danger">
                            <strong>Error:</strong> ${error.message}
                        </div>
                    </div>
                </div>
            `;
        },

        // Copy response to clipboard
        copyResponse() {
            const resultBody = document.querySelector('.result-body.active .code-block');
            if (!resultBody) return;

            const text = resultBody.textContent;
            navigator.clipboard.writeText(text).then(() => {
                ErrorManager.updateStatus('success', 'Response copied to clipboard');
            }).catch(error => {
                ErrorManager.handleError(error, 'Copy Response');
            });
        },

        // =============================================================================
        // UI HELPERS & EVENT HANDLING
        // =============================================================================

        // Setup event listeners
        _setupEventListeners() {
            // Listen for sidebar open requests
            EventBus.on(APIEvents.UI.SIDEBAR_OPENED, (data) => {
                if (data.type === 'testing' && data.endpoint) {
                    this.openSidebar(data.endpoint, false); // Don't emit event to prevent loop
                }
            });
        },

        // Setup sidebar UI
        _setupSidebar() {
            // Clean up any existing event listeners first
            this.cleanup();

            // Close button
            const closeBtn = document.getElementById('close-tester-btn');
            if (closeBtn) {
                const cleanup = this._addClickListener(closeBtn, () => {
                    this.closeSidebar();
                });
                this._eventCleanup.push(cleanup);
            }

            // Send request button
            const sendBtn = document.getElementById('send-request-btn');
            if (sendBtn) {
                const cleanup = this._addClickListener(sendBtn, () => {
                    this.sendRequest();
                });
                this._eventCleanup.push(cleanup);
            }

            // Reset form button
            const resetBtn = document.getElementById('reset-form-btn');
            if (resetBtn) {
                const cleanup = this._addClickListener(resetBtn, () => {
                    this.resetToDefaults();
                });
                this._eventCleanup.push(cleanup);
            }

            // Send request buttons
            const adminBtn = document.getElementById('send-request-admin-btn');
            if (adminBtn) {
                const cleanup = this._addClickListener(adminBtn, () => {
                    this.sendRequest('admin');
                });
                this._eventCleanup.push(cleanup);
            }

            const authBtn = document.getElementById('send-request-auth-btn');
            if (authBtn) {
                const cleanup = this._addClickListener(authBtn, () => {
                    this.sendRequest('auth');
                });
                this._eventCleanup.push(cleanup);
            }

            const guestBtn = document.getElementById('send-request-guest-btn');
            if (guestBtn) {
                const cleanup = this._addClickListener(guestBtn, () => {
                    this.sendRequest('guest');
                });
                this._eventCleanup.push(cleanup);
            }

            // Setup main tester tabs (Parameters/Response)
            this._setupTesterTabs();
        },

        // Setup tester tab switching
        _setupTesterTabs() {
            const tabs = document.querySelectorAll('.tester-tab');
            const contents = document.querySelectorAll('.tester-tab-content');

            tabs.forEach(tab => {
                const cleanup = this._addClickListener(tab, () => {
                    const targetTab = tab.dataset.tab;

                    // Update active tab
                    tabs.forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');

                    // Update active content
                    contents.forEach(c => c.classList.remove('active'));
                    const targetContent = document.getElementById(`${targetTab}-tab`);
                    if (targetContent) {
                        targetContent.classList.add('active');
                    }
                });
                this._eventCleanup.push(cleanup);
            });
        },

        // Setup form handlers
        _setupFormHandlers() {
            // Form submission
            const form = document.getElementById('api-test-form');
            if (form) {
                const cleanup = this._addSubmitListener(form, (e) => {
                    e.preventDefault();
                    this.sendRequest();
                });
                this._eventCleanup.push(cleanup);
            }
        },

        // Setup result tab switching
        _setupResultTabs() {
            const tabs = document.querySelectorAll('.result-tab');
            const contents = document.querySelectorAll('.result-body');

            tabs.forEach(tab => {
                const cleanup = this._addClickListener(tab, () => {
                    const targetTab = tab.dataset.tab;

                    // Update active tab
                    tabs.forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');

                    // Update active content
                    contents.forEach(c => c.classList.remove('active'));
                    const targetContent = document.querySelector(`[data-content="${targetTab}"]`);
                    if (targetContent) {
                        targetContent.classList.add('active');
                    }
                });
                this._eventCleanup.push(cleanup);
            });
        },

        // Attach form listeners
        _attachFormListeners(container) {
            // Path parameter input listeners
            const pathInputs = container.querySelectorAll('input[name*="pathParams"]');
            pathInputs.forEach(input => {
                const cleanup = this._addInputListener(input, () => {
                    this._updateUrlDisplay(this._currentEndpoint);
                });
                this._eventCleanup.push(cleanup);
            });

            // Add query parameter button
            const addQueryBtn = container.querySelector('.add-query-param-btn');
            if (addQueryBtn) {
                const cleanup = this._addClickListener(addQueryBtn, () => {
                    this._addQueryParamRow();
                });
                this._eventCleanup.push(cleanup);
            }

            // Setup response tab switching
            this._setupResponseTabs();

            // Setup copy response button
            const copyResponseBtn = document.getElementById('copy-response-btn');
            if (copyResponseBtn) {
                const cleanup = this._addClickListener(copyResponseBtn, () => {
                    this._copyResponseBody();
                });
                this._eventCleanup.push(cleanup);
            }

            // Setup JSON format button for request body
            const formatBtn = container.querySelector('.format-json-btn');
            if (formatBtn) {
                const cleanup = this._addClickListener(formatBtn, () => {
                    this._formatRequestBodyJson();
                });
                this._eventCleanup.push(cleanup);
            }

            // Setup load example button for request body
            const loadExampleBtn = container.querySelector('.load-example-btn');
            if (loadExampleBtn) {
                const cleanup = this._addClickListener(loadExampleBtn, () => {
                    this._loadExampleRequestBody();
                });
                this._eventCleanup.push(cleanup);
            }
        },

        // Format JSON in request body textarea
        _formatRequestBodyJson() {
            const textarea = document.getElementById('request-body');
            if (textarea && textarea.value.trim()) {
                try {
                    const jsonData = JSON.parse(textarea.value);
                    textarea.value = JSON.stringify(jsonData, null, 2);
                } catch (e) {
                    console.warn('Invalid JSON in request body:', e);
                }
            }
        },

        // Load example request body
        _loadExampleRequestBody() {
            if (!this._currentEndpoint) return;

            const textarea = document.getElementById('request-body');
            if (!textarea) return;

            // Generate example from actual request schema
            if (this._currentEndpoint.request) {
                try {
                    const example = APIDataManager.generateExampleFromSchema(this._currentEndpoint.request);
                    if (example && typeof example === 'object') {
                        textarea.value = JSON.stringify(example, null, 2);
                    } else {
                        console.warn('No valid example generated from schema');
                        this._loadFallbackExample(textarea);
                    }
                } catch (error) {
                    console.error('Failed to generate example from schema:', error);
                    this._loadFallbackExample(textarea);
                }
            } else {
                console.warn('No request schema available for endpoint');
                this._loadFallbackExample(textarea);
            }
        },

        // Load fallback example when schema is unavailable
        _loadFallbackExample(textarea) {
            const fallbackExample = {
                "key": "value",
                "example": "Please replace with your actual data"
            };
            textarea.value = JSON.stringify(fallbackExample, null, 2);
        },

        // Add query parameter row
        _addQueryParamRow() {
            const list = document.getElementById('query-params-list');
            const template = document.getElementById('query-param-template');

            if (list && template) {
                const newRow = template.cloneNode(true);
                newRow.id = `query-param-${Date.now()}`;
                newRow.style.display = 'flex';
                newRow.style.gap = '8px';
                newRow.style.marginBottom = '8px';
                newRow.style.alignItems = 'center';

                // Add remove functionality
                const removeBtn = newRow.querySelector('.remove-param-btn');
                if (removeBtn) {
                    removeBtn.addEventListener('click', () => {
                        newRow.remove();
                        // Update URL when parameter is removed
                        this._updateUrlDisplay(this._currentEndpoint);
                    });
                }

                // Add input listeners to update URL
                const nameInput = newRow.querySelector('.query-param-name');
                const valueInput = newRow.querySelector('.query-param-value');
                if (nameInput && valueInput) {
                    nameInput.addEventListener('input', () => this._updateUrlDisplay(this._currentEndpoint));
                    valueInput.addEventListener('input', () => this._updateUrlDisplay(this._currentEndpoint));
                }

                list.appendChild(newRow);
            }
        },

        // Send API request with specified auth mode
        sendRequest(authMode = 'guest') {
            if (!this._currentEndpoint) {
                console.error('No current endpoint to test');
                return;
            }

            try {
                // Collect form data
                const formData = this._collectFormData();

                // Build request URL
                let url = this._currentEndpoint.path;

                // Replace path parameters
                if (formData.pathParams) {
                    Object.entries(formData.pathParams).forEach(([key, value]) => {
                        if (value && value.trim()) {
                            url = url.replace(`{${key}}`, encodeURIComponent(value));
                        }
                    });
                }

                // Add query parameters
                const queryParams = new URLSearchParams();
                if (formData.queryParams) {
                    Object.entries(formData.queryParams).forEach(([key, value]) => {
                        if (key && value) {
                            queryParams.append(key, value);
                        }
                    });
                }

                // Add custom query parameters from the optional section
                const customQueryParams = this._getCustomQueryParams();
                Object.entries(customQueryParams).forEach(([key, value]) => {
                    if (key && value) {
                        queryParams.append(key, value);
                    }
                });

                if (queryParams.toString()) {
                    url += '?' + queryParams.toString();
                }

                // Prepare request options
                const options = {
                    method: this._currentEndpoint.method,
                    headers: {
                        'Content-Type': 'application/json',
                        ...this._getAuthHeaders(authMode)
                    }
                };

                // Add request body if needed
                if (formData.requestBody && Object.keys(formData.requestBody).length > 0 &&
                    ['POST', 'PUT', 'PATCH'].includes(this._currentEndpoint.method.toUpperCase())) {
                    options.body = JSON.stringify(formData.requestBody);
                }

                // Update UI to show loading
                this._showRequestLoading();

                // Make the request
                const startTime = Date.now();
                fetch(url, options)
                    .then(async response => {
                        const endTime = Date.now();
                        const duration = endTime - startTime;

                        const responseData = {
                            status: response.status,
                            statusText: response.statusText,
                            headers: Object.fromEntries(response.headers.entries()),
                            body: await response.text(),
                            duration: duration
                        };

                        this._showResponse(responseData);
                    })
                    .catch(error => {
                        console.error('Request failed:', error);
                        this._showRequestError(error);
                    });

            } catch (error) {
                console.error('Failed to send request:', error);
                this._showRequestError(error);
            }
        },

        // Collect form data
        _collectFormData() {
            const formData = {
                pathParams: {},
                queryParams: {},
                requestBody: {}
            };

            // Collect path parameters
            const pathInputs = document.querySelectorAll('input[name*="pathParams"]');
            pathInputs.forEach(input => {
                const paramName = input.name.match(/\[([^\]]+)\]/)?.[1];
                if (paramName) {
                    formData.pathParams[paramName] = input.value;
                }
            });

            // Collect custom query parameters
            const queryRows = document.querySelectorAll('#query-params-list > div');
            queryRows.forEach(row => {
                const nameInput = row.querySelector('.query-param-name');
                const valueInput = row.querySelector('.query-param-value');
                if (nameInput && valueInput && nameInput.value && valueInput.value) {
                    formData.queryParams[nameInput.value] = valueInput.value;
                }
            });

            // Collect request body fields
            const bodyInputs = document.querySelectorAll('input[name*="requestBody"], textarea[name*="requestBody"], select[name*="requestBody"]');

            bodyInputs.forEach(input => {
                if (input.name === 'requestBody') {
                    // This is the main JSON textarea
                    if (input.value && input.value.trim()) {
                        try {
                            // Try to parse as JSON
                            const jsonData = JSON.parse(input.value);
                            formData.requestBody = jsonData;
                        } catch (e) {
                            console.warn('Failed to parse JSON, treating as string:', e);
                            formData.requestBody = { data: input.value };
                        }
                    }
                } else {
                    // This is an individual field with name like "requestBody[fieldName]"
                    const fieldName = input.name.match(/\[([^\]]+)\]/)?.[1];

                    if (fieldName && input.value !== '') {
                        // Handle different input types
                        let value = input.value;
                        if (input.type === 'checkbox') {
                            value = input.checked;
                        } else if (input.type === 'number') {
                            value = Number(input.value);
                        }
                        formData.requestBody[fieldName] = value;
                    }
                }
            });

            return formData;
        },

        // Get custom query parameters
        _getCustomQueryParams() {
            const params = {};
            const queryRows = document.querySelectorAll('#query-params-list > div');
            queryRows.forEach(row => {
                const nameInput = row.querySelector('.query-param-name');
                const valueInput = row.querySelector('.query-param-value');
                if (nameInput && valueInput && nameInput.value && valueInput.value) {
                    params[nameInput.value] = valueInput.value;
                }
            });
            return params;
        },

        // Copy response body to clipboard
        _copyResponseBody() {
            const responseBody = document.querySelector('#response-body .code-block code');
            if (!responseBody) return;

            const textContent = responseBody.textContent || responseBody.innerText;

            if (!textContent.trim()) {
                console.warn('No response content to copy');
                return;
            }

            navigator.clipboard.writeText(textContent).then(() => {
                // Visual feedback
                const copyBtn = document.getElementById('copy-response-btn');
                if (copyBtn) {
                    const originalText = copyBtn.innerHTML;
                    copyBtn.innerHTML = '<i class="ri-check-line" style="color: #374151;"></i>';
                    copyBtn.style.backgroundColor = '#f3f4f6';
                    copyBtn.style.borderColor = '#d1d5db';

                    setTimeout(() => {
                        copyBtn.innerHTML = originalText;
                        copyBtn.style.backgroundColor = '';
                        copyBtn.style.borderColor = '';
                    }, 1500);
                }
            }).catch(err => {
                console.error('Failed to copy response:', err);
            });
        },

        // Setup response tab switching
        _setupResponseTabs() {
            const tabs = document.querySelectorAll('.response-tab');
            const contents = document.querySelectorAll('.response-tab-content');

            tabs.forEach(tab => {
                const cleanup = this._addClickListener(tab, () => {
                    const targetTab = tab.dataset.tab;

                    // Update active tab
                    tabs.forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');

                    // Update active content
                    contents.forEach(c => c.classList.remove('active'));
                    const targetContent = document.getElementById(`response-${targetTab}`);
                    if (targetContent) {
                        targetContent.classList.add('active');

                        // Show empty state if no content
                        this._checkResponseTabEmpty(targetTab);
                    }
                });
                this._eventCleanup.push(cleanup);
            });
        },

        // Check if response tab is empty and show appropriate state
        _checkResponseTabEmpty(tabName) {
            const content = document.querySelector(`#response-${tabName} .code-block code`);
            if (content && (!content.textContent || content.textContent.trim() === '')) {
                const emptyMessage = tabName === 'body' ? 'No response body available' : 'No response headers available';
                content.innerHTML = `<span class="json-null">${emptyMessage}</span>`;
            }
        },

        // Get auth headers based on mode
        _getAuthHeaders(authMode) {
            const headers = {};

            switch (authMode) {
                case 'admin':
                    // Get superuser token from localStorage
                    const adminAuth = localStorage.getItem('__pb_superuser_auth__');
                    if (adminAuth) {
                        try {
                            const adminData = JSON.parse(adminAuth);
                            if (adminData.token) {
                                headers['Authorization'] = `Bearer ${adminData.token}`;
                            }
                        } catch (e) {
                            console.warn('Invalid admin auth data in localStorage');
                        }
                    }
                    break;
                case 'auth':
                    // Get user token from localStorage
                    const userAuth = localStorage.getItem('pocketbase_auth');
                    if (userAuth) {
                        try {
                            const userData = JSON.parse(userAuth);
                            if (userData.token) {
                                headers['Authorization'] = `Bearer ${userData.token}`;
                            }
                        } catch (e) {
                            console.warn('Invalid user auth data in localStorage');
                        }
                    }
                    break;
                case 'guest':
                default:
                    // No auth headers for guest
                    break;
            }

            return headers;
        },

        // Show request loading state
        _showRequestLoading() {
            const statusInfo = document.getElementById('response-status-info');
            if (statusInfo) {
                statusInfo.innerHTML = `
                    <span class="status-badge status-info">Sending...</span>
                    <span class="response-time">Please wait</span>
                `;
            }

            // Switch to response tab
            const responseTab = document.querySelector('.tester-tab[data-tab="response"]');
            if (responseTab) {
                responseTab.click();
            }
        },

        // Show response data
        _showResponse(responseData) {
            // Update status info
            const statusInfo = document.getElementById('response-status-info');
            if (statusInfo) {
                const statusClass = responseData.status < 300 ? 'status-success' :
                                  responseData.status < 500 ? 'status-warning' : 'status-error';

                statusInfo.innerHTML = `
                    <span class="status-badge ${statusClass}">${responseData.status}</span>
                    <span class="response-time">${responseData.duration}ms</span>
                `;
            }

            // Show response body with syntax highlighting
            const responseBody = document.querySelector('#response-body .code-block code');
            if (responseBody) {
                if (responseData.body && responseData.body.trim()) {
                    try {
                        const jsonData = JSON.parse(responseData.body);
                        const highlighted = APIDataManager.formatSchemaForDisplay(jsonData, 'json');
                        responseBody.innerHTML = highlighted;
                    } catch {
                        // Not JSON, show as plain text with escaping
                        responseBody.textContent = responseData.body;
                    }
                } else {
                    responseBody.innerHTML = '<span class="json-null">No response body</span>';
                }
            }

            // Show response headers with syntax highlighting
            const responseHeaders = document.querySelector('#response-headers .code-block code');
            if (responseHeaders) {
                if (responseData.headers && Object.keys(responseData.headers).length > 0) {
                    const highlighted = APIDataManager.formatSchemaForDisplay(responseData.headers, 'json');
                    responseHeaders.innerHTML = highlighted;
                } else {
                    responseHeaders.innerHTML = '<span class="json-null">No response headers</span>';
                }
            }

            // Hide empty state
            const emptyState = document.getElementById('response-empty-state');
            if (emptyState) {
                emptyState.style.display = 'none';
            }

            // Show copy button
            const copyBtn = document.getElementById('copy-response-btn');
            if (copyBtn) {
                copyBtn.style.display = 'block';
            }
        },

        // Show request error
        _showRequestError(error) {
            const statusInfo = document.getElementById('response-status-info');
            if (statusInfo) {
                statusInfo.innerHTML = `
                    <span class="status-badge status-error">Error</span>
                    <span class="response-time">Request failed</span>
                `;
            }

            const responseBody = document.querySelector('#response-body .code-block code');
            if (responseBody) {
                responseBody.textContent = `Error: ${error.message || error}`;
            }
        },

        // Update URL display
        _updateUrlDisplay(endpoint, forceClean = false) {
            if (!endpoint) return;

            // Update method
            const methodElement = document.getElementById('tester-method');
            if (methodElement) {
                methodElement.textContent = endpoint.method.toUpperCase();
                methodElement.className = `http-method ${endpoint.method.toLowerCase()}`;
            }

            // Update path
            const pathElement = document.getElementById('tester-path');
            if (pathElement) {
                let url = endpoint.path;

                if (!forceClean) {
                    // Get current path parameter values
                    const pathParams = {};
                    const pathInputs = document.querySelectorAll('input[name*="pathParams"]');
                    pathInputs.forEach(input => {
                        const paramName = input.name.match(/\[([^\]]+)\]/)?.[1];
                        if (paramName) {
                            pathParams[paramName] = input.value || `{${paramName}}`;
                        }
                    });

                    // Build URL without encoding placeholders
                    Object.entries(pathParams).forEach(([key, value]) => {
                        if (value && value !== `{${key}}`) {
                            url = url.replace(`{${key}}`, encodeURIComponent(value));
                        }
                    });

                    // Add custom query parameters to URL display
                    const customQueryParams = this._getCustomQueryParams();
                    const queryString = new URLSearchParams(customQueryParams).toString();
                    if (queryString) {
                        url += '?' + queryString;
                    }
                }

                pathElement.textContent = url;
            }

            // Update description
            const descElement = document.getElementById('tester-description');
            if (descElement) {
                descElement.textContent = endpoint.description || 'No description available';
            }

            // Update auth info
            const authElement = document.getElementById('tester-auth-info');
            if (authElement) {
                if (endpoint.auth?.required) {
                    authElement.innerHTML = `<span class="auth-badge auth-required">${endpoint.auth.description || 'Authentication required'}</span>`;
                } else {
                    authElement.innerHTML = `<span class="auth-badge">No auth required</span>`;
                }
            }
        },

        // Reset form
        resetForm() {
            const form = document.getElementById('api-test-form');
            if (form) {
                form.reset();
                this._updateUrlDisplay(this._currentEndpoint);
            }
        },

        // Reset to defaults (full sidebar reset)
        resetToDefaults() {
            // Clear form container
            const container = document.getElementById('schema-form-container');
            if (container) {
                container.innerHTML = `
                    <div class="txt-center txt-hint">
                        <i class="ri-loader-4-line animate-spin"></i>
                        <p>Loading schema...</p>
                    </div>
                `;
            }

            // Clear custom query parameters
            const queryParamsList = document.getElementById('query-params-list');
            if (queryParamsList) {
                queryParamsList.innerHTML = '';
            }

            // Reset response area
            const emptyState = document.getElementById('response-empty-state');
            if (emptyState) {
                emptyState.style.display = 'block';
            }

            const responseBody = document.querySelector('#response-body .code-block code');
            if (responseBody) {
                responseBody.innerHTML = '<span class="json-null">No response body available</span>';
            }

            const responseHeaders = document.querySelector('#response-headers .code-block code');
            if (responseHeaders) {
                responseHeaders.innerHTML = '<span class="json-null">No response headers available</span>';
            }

            // Reset status info
            const statusInfo = document.getElementById('response-status-info');
            if (statusInfo) {
                statusInfo.innerHTML = `
                    <span class="status-badge status-ready">Ready</span>
                    <span class="response-time">Send a request</span>
                `;
            }

            // Hide copy button
            const copyBtn = document.getElementById('copy-response-btn');
            if (copyBtn) {
                copyBtn.style.display = 'none';
            }

            // Reset to Parameters tab
            const paramTab = document.querySelector('.tester-tab[data-tab="parameters"]');
            const responseTab = document.querySelector('.tester-tab[data-tab="response"]');
            const paramContent = document.getElementById('parameters-tab');
            const responseContent = document.getElementById('response-tab');

            if (paramTab && responseTab && paramContent && responseContent) {
                paramTab.classList.add('active');
                responseTab.classList.remove('active');
                paramContent.classList.add('active');
                responseContent.classList.remove('active');
            }

            // Rebuild the form for the current endpoint
            if (this._currentEndpoint) {
                this._buildTestForm(this._currentEndpoint);
                // Update URL display to reset path and remove query parameters
                this._updateUrlDisplay(this._currentEndpoint, true);
            }
        },

        // Set loading state
        _setLoadingState(loading) {
            const sendBtn = document.getElementById('send-request-btn');
            if (sendBtn) {
                sendBtn.disabled = loading;
                sendBtn.innerHTML = loading
                    ? '<i class="ri-loader-line rotating"></i> Sending...'
                    : '<i class="ri-send-plane-line"></i> Send Request';
            }
        },

        // Add to test history
        _addToHistory(request, result) {
            const historyItem = {
                id: Date.now(),
                request: request,
                result: result,
                timestamp: new Date().toISOString()
            };

            this._testHistory.unshift(historyItem);

            // Keep only last 10 items
            if (this._testHistory.length > 10) {
                this._testHistory = this._testHistory.slice(0, 10);
            }

            StateManager.setState('testing.history', this._testHistory);
        },

        // Helper: Add click listener
        _addClickListener(element, handler) {
            if (!element) return null;
            element.addEventListener('click', handler);
            return () => element.removeEventListener('click', handler);
        },

        // Helper: Add input listener
        _addInputListener(element, handler) {
            if (!element) return null;
            const listener = (e) => handler(e.target.value, e);
            element.addEventListener('input', listener);
            return () => element.removeEventListener('input', listener);
        },

        // Helper: Add submit listener
        _addSubmitListener(element, handler) {
            if (!element) return null;
            element.addEventListener('submit', handler);
            return () => element.removeEventListener('submit', handler);
        },

        // Cleanup
        cleanup() {
            this._eventCleanup.forEach(cleanup => cleanup());
            this._eventCleanup = [];
        }
    };

    // =============================================================================
    // GLOBAL EXPORTS
    // =============================================================================

    window.APITestingManager = APITestingManager;

{{end}}
