{{define "api_init_js"}}
    // =============================================================================
    // API SYSTEM INITIALIZATION - STREAMLINED
    // =============================================================================

    // Global initialization guard
    if (window.apiSystemInitialized) {
        return;
    }

    // System initialization
    async function initializeApp() {
        try {
            // Initialize core system (EventBus, StateManager, ErrorManager)
            await APICore.init();

            // Wait for required modules to be available
            await waitForModules(['APIDataManager', 'APIUIManager', 'APITestingManager']);

            // Initialize data management
            if (typeof APIDataManager !== 'undefined') {
                await APIDataManager.init();
            } else {
                console.error('APIDataManager not found');
            }

            // Initialize UI management
            if (typeof APIUIManager !== 'undefined') {
                APIUIManager.init();
            } else {
                console.error('APIUIManager not found');
            }

            // Initialize testing system
            if (typeof APITestingManager !== 'undefined') {
                APITestingManager.init();
            } else {
                console.error('APITestingManager not found');
            }

            // Load initial data
            if (typeof APIDataManager !== 'undefined') {
                await APIDataManager.loadVersions();
            } else {
                console.error('Cannot load data - APIDataManager not available');
            }

            // Mark system as initialized
            window.apiSystemInitialized = true;
            StateManager.setState('system.initialized', true);

            // Final setup
            setupFinalUI();

            ErrorManager.updateStatus('success', 'System ready');

        } catch (error) {
            console.error('Failed to initialize API System:', error);
            ErrorManager.handleError(error, 'System Initialization');
            showInitializationError(error);
        }
    }

    // Wait for required modules to be available
    async function waitForModules(moduleNames, timeout = 5000) {
        const startTime = Date.now();

        while (Date.now() - startTime < timeout) {
            const missingModules = moduleNames.filter(name => typeof window[name] === 'undefined');

            if (missingModules.length === 0) {
                return;
            }

            await new Promise(resolve => setTimeout(resolve, 100));
        }

        const missing = moduleNames.filter(name => typeof window[name] === 'undefined');
        console.error('Timeout waiting for modules:', missing);
        throw new Error(`Required modules not available after ${timeout}ms: ${missing.join(', ')}`);
    }

    // Setup final UI state
    function setupFinalUI() {
        const endpoints = StateManager.getState('api.endpoints') || [];
        const versions = StateManager.getState('api.versions') || [];
        const currentVersion = StateManager.getState('api.currentVersion');

        // Update version selector
        const versionSelect = document.getElementById('version-select');
        if (versionSelect && versions.length > 0) {
            versionSelect.innerHTML = versions.map(version => {
                const config = version.config || {};
                const title = config.title || 'API';
                const versionText = config.version || 'v1';
                const status = config.status ? ` (${config.status})` : '';
                const displayText = `${title} ${versionText}${status}`;

                return `<option value="${version.version}" ${version.version === currentVersion ? 'selected' : ''}>
                    ${displayText}
                </option>`;
            }).join('');
        }

        // Update endpoint statistics
        updateStatistics(endpoints);

        if (endpoints.length > 0) {
            // Show filters section if we have endpoints
            const filtersSection = document.getElementById('api-filters');
            if (filtersSection) {
                filtersSection.style.display = 'block';
            }

            // Update statistics
            EventBus.emit(APIEvents.UI.TAB_CHANGED, {
                tab: StateManager.getState('ui.currentTab'),
                endpointCount: endpoints.length
            });
        }
    }

    // Update statistics display
    function updateStatistics(endpoints) {
        // Count statistics
        const stats = {
            totalEndpoints: endpoints.length,
            uniquePaths: new Set(endpoints.map(e => e.path)).size,
            authRequired: endpoints.filter(e => e.auth?.required).length,
            totalTags: new Set(endpoints.flatMap(e => e.tags || [])).size
        };

        // Update DOM elements
        const updates = [
            { id: 'api-endpoints-count', value: stats.totalEndpoints },
            { id: 'stats-unique-paths', value: stats.uniquePaths },
            { id: 'stats-auth-required', value: stats.authRequired },
            { id: 'stats-total-tags', value: stats.totalTags },
            { id: 'filtered-count', value: stats.totalEndpoints },
            { id: 'total-count', value: stats.totalEndpoints }
        ];

        updates.forEach(({ id, value }) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value;
            }
        });
    }

    // Show initialization error
    function showInitializationError(error) {
        const container = document.getElementById('main-content');
        if (container) {
            container.innerHTML = `
                <div class="alert alert-danger">
                    <h4><i class="ri-error-warning-line"></i> Initialization Failed</h4>
                    <p>The API documentation system failed to initialize:</p>
                    <pre>${error.message}</pre>
                    <div class="mt-3">
                        <button class="btn btn-primary" onclick="window.location.reload()">
                            <i class="ri-refresh-line"></i> Retry
                        </button>
                    </div>
                </div>
            `;
        }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeApp);
    } else {
        setTimeout(initializeApp, 0);
    }

    // Global utilities
    window.refreshAPIData = () => {
        if (typeof APIDataManager !== 'undefined' && APIDataManager.refresh) {
            return APIDataManager.refresh();
        }
    };

    window.initializeAPISystem = initializeApp;

{{end}}
