{{define "api_loader_js"}}
    // =============================================================================
    // SIMPLIFIED API LOADER - FOR CLEAN OPENAPI BACKEND
    // =============================================================================

    const APILoader = {
        loadingState: {
            versions: false,
            endpoints: false
        },

        // Get superuser authentication token from localStorage
        getSuperuserAuthToken() {
            try {
                console.log('🔑 Checking for superuser auth token in localStorage...');
                const authData = localStorage.getItem('__pb_superuser_auth__');
                if (!authData) {
                    console.warn('❌ No superuser authentication token found in localStorage');
                    console.log('📋 Available localStorage keys:', Object.keys(localStorage));
                    return null;
                }

                console.log('✅ Found auth data in localStorage, parsing...');
                const parsed = JSON.parse(authData);
                const token = parsed.token || null;
                console.log('🎫 Parsed token:', token ? `${token.substring(0, 20)}...` : 'null');
                return token;
            } catch (error) {
                console.error('❌ Failed to parse superuser auth token:', error);
                return null;
            }
        },

        // Create authenticated fetch options
        getAuthenticatedFetchOptions(options = {}) {
            const token = this.getSuperuserAuthToken();
            if (!token) {
                throw new Error('SuperUser authentication required');
            }

            return {
                ...options,
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    ...options.headers
                }
            };
        },

        // Load available API versions
        async loadVersions() {
            if (this.loadingState.versions) {
                console.log('Versions already loading, skipping duplicate request');
                return;
            }

            this.loadingState.versions = true;

            try {
                this.updateStatus('loading', 'Loading API versions...');

                const response = await fetch('/api/docs/versions', this.getAuthenticatedFetchOptions());
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('SuperUser authentication required. Please log in as superuser.');
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                console.log('📊 Parsing response data...');
                const data = await response.json();
                console.log('📄 Response data structure:', {
                    hasVersions: !!data.versions,
                    versionsLength: data.versions?.length,
                    defaultVersion: data.default_version,
                    dataKeys: Object.keys(data || {})
                });

                if (!data || !data.versions) {
                    console.error('❌ Invalid response format:', data);
                    throw new Error('Invalid response format from versions endpoint');
                }

                // Store version information
                console.log('💾 Storing version information in APIState...');
                APIState.availableVersions = data.versions;
                APIState.currentVersion = data.default_version || (data.versions.length > 0 ? data.versions[0].version : null);

                console.log(`✅ Loaded ${data.versions.length} API versions, default: ${APIState.currentVersion}`);
                console.log('📋 Available versions:', data.versions.map(v => v.version));

                // Update UI
                console.log('🎨 Populating version selector...');
                this.populateVersionSelector();

                // Load the current version's endpoints
                if (APIState.currentVersion) {
                    console.log(`🔄 Loading endpoints for version: ${APIState.currentVersion}`);
                    await this.loadEndpoints();
                } else {
                    console.error('❌ No current version set');
                    throw new Error('No API versions available');
                }

            } catch (error) {
                console.error('❌ Failed to load API versions:', error);
                console.error('📍 Error stack:', error.stack);
                this.updateStatus('error', `Failed to load API versions: ${error.message}`);
                throw error;
            } finally {
                console.log('🏁 Finished loadVersions(), resetting loading state');
                this.loadingState.versions = false;
            }
        },

        // Load OpenAPI spec for current version
        async loadEndpoints() {
            if (this.loadingState.endpoints) {
                console.log('Endpoints already loading, skipping duplicate request');
                return;
            }

            this.loadingState.endpoints = true;

            try {
                const version = APIState.currentVersion;
                if (!version) {
                    throw new Error('No current version selected');
                }

                this.updateStatus('loading', `Loading endpoints for version ${version}...`);

                const response = await fetch(`/api/docs/${version}`, this.getAuthenticatedFetchOptions());
                if (!response.ok) {
                    if (response.status === 401) {
                        throw new Error('SuperUser authentication required. Please log in as superuser.');
                    }
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                console.log('📊 Parsing endpoints response data...');
                const openApiSpec = await response.json();
                console.log('📄 OpenAPI spec structure:', {
                    hasEndpoints: !!openApiSpec.endpoints,
                    endpointsLength: openApiSpec.endpoints?.length,
                    specKeys: Object.keys(openApiSpec || {})
                });

                if (!openApiSpec || !openApiSpec.endpoints) {
                    console.error('❌ Invalid OpenAPI specification:', openApiSpec);
                    throw new Error('Invalid OpenAPI specification received');
                }

                // Store the clean OpenAPI data - no conversion needed!
                console.log('💾 Storing OpenAPI data in APIState...');
                APIState.openApiSchema = openApiSpec;
                APIState.allEndpoints = openApiSpec.endpoints;
                APIState.setEndpoints(openApiSpec.endpoints);

                console.log(`✅ Loaded ${openApiSpec.endpoints.length} endpoints for version ${version}`);

                // Update UI
                this.updateEndpointsList();
                this.updateStatsDisplay();
                this.updateVersionDisplay();
                this.initializeFilters();

                this.updateStatus('success', `Loaded ${openApiSpec.endpoints.length} endpoints`);

            } catch (error) {
                console.error('Failed to load endpoints:', error);
                this.updateStatus('error', `Failed to load endpoints: ${error.message}`);
                throw error;
            } finally {
                this.loadingState.endpoints = false;
            }
        },

        // Switch to different API version
        async switchVersion(newVersion) {
            if (newVersion === APIState.currentVersion) {
                console.log(`Already on version ${newVersion}`);
                return;
            }

            console.log(`Switching from ${APIState.currentVersion} to ${newVersion}`);
            APIState.currentVersion = newVersion;

            // Clear current data
            APIState.allEndpoints = [];
            APIState.filteredEndpoints = [];
            APIState.openApiSchema = null;

            // Load new version
            await this.loadEndpoints();
        },

        // Populate version selector dropdown
        populateVersionSelector() {
            const versionSelect = document.getElementById('version-select');
            if (!versionSelect || !APIState.availableVersions.length) {
                return;
            }

            versionSelect.innerHTML = '';

            APIState.availableVersions.forEach(versionInfo => {
                const option = document.createElement('option');
                option.value = versionInfo.version;

                const config = versionInfo.config || {};
                const title = config.title || 'API';
                const version = config.version || versionInfo.version;
                const status = versionInfo.status || 'stable';
                const statusIcon = this.getStatusIcon(status);

                option.textContent = `${title} ${version} ${statusIcon}`;
                option.selected = versionInfo.version === APIState.currentVersion;
                versionSelect.appendChild(option);
            });

            // Add change event listener
            versionSelect.removeEventListener('change', this.handleVersionChange);
            versionSelect.addEventListener('change', this.handleVersionChange.bind(this));
        },

        // Handle version selection change
        async handleVersionChange(event) {
            const newVersion = event.target.value;
            if (newVersion && newVersion !== APIState.currentVersion) {
                try {
                    await this.switchVersion(newVersion);
                } catch (error) {
                    console.error('Failed to switch version:', error);
                    // Revert selection on error
                    event.target.value = APIState.currentVersion;
                }
            }
        },

        // Update endpoints list in UI
        updateEndpointsList() {
            console.log('🎨 updateEndpointsList() called');
            if (typeof EndpointRenderer !== 'undefined' && EndpointRenderer.render) {
                console.log('✅ EndpointRenderer available, calling render...');
                EndpointRenderer.render();
                console.log('🏁 EndpointRenderer.render() completed');
            } else {
                console.error('❌ EndpointRenderer or render method not available:', {
                    EndpointRenderer: typeof EndpointRenderer,
                    render: typeof EndpointRenderer?.render
                });
            }
        },

        // Update statistics display
        updateStatsDisplay() {
            console.log('📊 updateStatsDisplay() called');
            const stats = this.calculateStats();
            console.log('📈 Calculated stats:', stats);
            APIState.apiStats = stats;

            if (typeof UIController !== 'undefined' && UIController.updateStatistics) {
                console.log('✅ UIController available, calling updateStatistics...');
                UIController.updateStatistics(stats);
                console.log('🏁 updateStatistics() completed');
            } else {
                console.error('❌ UIController or updateStatistics not available:', {
                    UIController: typeof UIController,
                    updateStatistics: typeof UIController?.updateStatistics
                });
            }
        },

        // Update version display information
        updateVersionDisplay() {
            console.log('🏷️ updateVersionDisplay() called');
            const versionInfo = APIState.availableVersions.find(v => v.version === APIState.currentVersion);
            console.log('📋 Version info found:', versionInfo);
            if (!versionInfo) {
                console.warn('⚠️ No version info found for current version:', APIState.currentVersion);
                return;
            }

            // Update version info display
            const versionInfoEl = document.getElementById('version-info');
            console.log('🎯 Version info element:', versionInfoEl);
            if (versionInfoEl && versionInfo.config) {
                console.log('✅ Updating version info display...');
                const config = versionInfo.config;
                versionInfoEl.innerHTML = `
                    <h3>${config.title || 'API'} ${config.version || versionInfo.version}</h3>
                    <p>${config.description || 'No description available'}</p>
                    <span class="status-badge status-${versionInfo.status || 'stable'}">${versionInfo.status || 'stable'}</span>
                `;
                console.log('🏁 Version display updated');
            } else {
                console.warn('⚠️ Version info element not found or no config available');
            }
        },

        // Initialize filter options
        initializeFilters() {
            console.log('🔧 initializeFilters() called');
            if (typeof UIController !== 'undefined') {
                console.log('✅ UIController available, initializing filters...');
                const stats = APIState.apiStats || this.calculateStats();
                console.log('📈 Using stats for filters:', stats);
                if (UIController.populateFilterOptions) {
                    console.log('🔄 Calling populateFilterOptions...');
                    UIController.populateFilterOptions(stats);
                    console.log('✅ populateFilterOptions completed');
                }

                // Show filters section
                const filtersSection = document.getElementById('api-filters');
                console.log('🎯 Filters section element:', filtersSection);
                if (filtersSection) {
                    filtersSection.style.display = 'block';
                    console.log('✅ Filters section shown');
                } else {
                    console.warn('⚠️ Filters section element not found');
                }
            } else {
                console.error('❌ UIController not available for filter initialization');
            }
        },

        // Calculate statistics from endpoints
        calculateStats() {
            const endpoints = APIState.allEndpoints || [];

            const stats = {
                totalEndpoints: endpoints.length,
                methods: {},
                tags: {},
                authTypes: {}
            };

            endpoints.forEach(endpoint => {
                // Count methods
                const method = endpoint.method || 'UNKNOWN';
                stats.methods[method] = (stats.methods[method] || 0) + 1;

                // Count tags
                (endpoint.tags || []).forEach(tag => {
                    stats.tags[tag] = (stats.tags[tag] || 0) + 1;
                });

                // Count auth types
                const authType = endpoint.auth?.type || 'none';
                stats.authTypes[authType] = (stats.authTypes[authType] || 0) + 1;
            });

            return stats;
        },

        // Get status icon for version status
        getStatusIcon(status) {
            const icons = {
                'stable': '✅',
                'testing': '🧪',
                'beta': '🔬',
                'deprecated': '⚠️',
                'maintenance': '🔧'
            };
            return icons[status] || '📋';
        },

        // Update status message
        updateStatus(type, message) {
            if (typeof ErrorStatusManager !== 'undefined') {
                ErrorStatusManager.updateStatus(type, message);
            } else if (typeof StatusManager !== 'undefined') {
                StatusManager.updateStatus(type, message);
            } else {
                console.log(`[${type.toUpperCase()}] ${message}`);
            }
        },

        // Check if currently loading
        isLoading() {
            return this.loadingState.versions || this.loadingState.endpoints;
        },

        // Initialize the API loader
        async initialize() {
            try {
                await this.loadVersions();
                return true;
            } catch (error) {
                console.error('Failed to initialize API loader:', error);
                return false;
            }
        },

        // DEBUG METHODS FOR TROUBLESHOOTING
        getDebugInfo() {
            return {
                timestamp: new Date().toISOString(),
                loading: {
                    versions: this.loadingState.versions,
                    endpoints: this.loadingState.endpoints
                },
                auth: {
                    hasToken: !!this.getSuperuserAuthToken(),
                    tokenPreview: this.getSuperuserAuthToken()?.substring(0, 20) + '...' || null
                },
                state: {
                    availableVersions: APIState.availableVersions?.length || 0,
                    currentVersion: APIState.currentVersion,
                    allEndpoints: APIState.allEndpoints?.length || 0,
                    filteredEndpoints: APIState.filteredEndpoints?.length || 0
                },
                components: {
                    APIState: typeof APIState,
                    UIController: typeof UIController,
                    EndpointRenderer: typeof EndpointRenderer,
                    ErrorStatusManager: typeof ErrorStatusManager
                },
                dom: {
                    versionSelect: !!document.getElementById('version-select'),
                    endpointsList: !!document.getElementById('endpoints-list'),
                    apiFilters: !!document.getElementById('api-filters')
                }
            };
        },

        async testConnection() {
            console.log('🧪 Testing API connection...');
            try {
                const response = await fetch('/api/docs/versions', this.getFetchOptions(false));
                console.log('✅ Connection test successful:', response.status, response.statusText);
                const data = await response.json();
                console.log('📊 Response data:', data);
                return { success: true, status: response.status, data };
            } catch (error) {
                console.error('❌ Connection test failed:', error);
                return { success: false, error: error.message };
            }
        },

        async forceReload() {
            console.log('🔄 Force reloading API data...');
            this.loadingState.versions = false;
            this.loadingState.endpoints = false;
            APIState.reset();
            return await this.initialize();
        },

        checkDependencies() {
            const deps = {
                APIState: typeof APIState !== 'undefined',
                UIController: typeof UIController !== 'undefined',
                EndpointRenderer: typeof EndpointRenderer !== 'undefined',
                ErrorStatusManager: typeof ErrorStatusManager !== 'undefined'
            };

            console.log('🔍 Dependency check:', deps);
            const missing = Object.entries(deps).filter(([name, available]) => !available);

            if (missing.length > 0) {
                console.error('❌ Missing dependencies:', missing.map(([name]) => name));
                return { success: false, missing: missing.map(([name]) => name) };
            } else {
                console.log('✅ All dependencies available');
                return { success: true };
            }
        }
    };

    // Export for global use
    if (typeof window !== 'undefined') {
        window.APILoader = APILoader;

        // Global debug helper for troubleshooting
        window.APIDebug = window.APIDebug || {};
        window.APIDebug.loader = {
            // Quick status check
            status: () => APILoader.getDebugInfo(),

            // Test API connection
            test: () => APILoader.testConnection(),

            // Force reload API data
            reload: () => APILoader.forceReload(),

            // Check component dependencies
            deps: () => APILoader.checkDependencies(),

            // Get auth token info
            auth: () => ({
                hasToken: !!APILoader.getSuperuserAuthToken(),
                tokenPreview: APILoader.getSuperuserAuthToken()?.substring(0, 20) + '...' || null
            }),

            // Manual initialization
            init: () => APILoader.initialize(),

            // Current state snapshot
            state: () => ({
                versions: APIState?.availableVersions || [],
                currentVersion: APIState?.currentVersion,
                endpoints: APIState?.allEndpoints?.length || 0,
                filtered: APIState?.filteredEndpoints?.length || 0
            })
        };

        console.log('🔧 Debug helper available: window.APIDebug.loader');
        console.log('💡 Try: APIDebug.loader.status() or APIDebug.loader.test()');
    }

{{end}}
