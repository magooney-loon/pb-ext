{{define "api_schema_manager_js"}}
    // =============================================================================
    // API SCHEMA MANAGER - SCHEMA EXTRACTION AND PROCESSING
    // =============================================================================

    const APISchemaManager = {


        // Extract parameter schema from endpoint data
        extractParameterSchema(endpoint) {

            console.log('[Schema Debug] extractParameterSchema called for endpoint:', endpoint);

            const schema = {
                pathParameters: [],
                queryParameters: [],
                headerParameters: [],
                requestBody: null,
                examples: {}
            };

            // Extract from OpenAPI endpoint data if available
            if (endpoint.data) {
                const endpointData = endpoint.data;


                // Extract path parameters from the path itself if not explicitly defined
                const pathParams = this.extractPathParameters(endpoint.path);
                console.log('[Schema Debug] Extracted path parameters from URL:', pathParams);
                if (pathParams.length > 0 && (!endpointData.parameters || endpointData.parameters.length === 0)) {
                    console.log('[Schema Debug] Using extracted path parameters since no explicit parameters found');
                    schema.pathParameters = pathParams;
                }

                // Extract parameters
                if (endpointData.parameters && Array.isArray(endpointData.parameters)) {
                    console.log('[Schema Debug] Processing explicit parameters:', endpointData.parameters);

                    endpointData.parameters.forEach((param, index) => {
                        console.log(`[Schema Debug] Processing parameter ${index}:`, param);

                        const normalizedParam = this.normalizeParameter(param);
                        console.log(`[Schema Debug] Normalized parameter:`, normalizedParam);

                        switch (param.in) {
                            case 'path':
                                schema.pathParameters.push(normalizedParam);
                                console.log('[Schema Debug] Added to path parameters');
                                break;
                            case 'query':
                                schema.queryParameters.push(normalizedParam);
                                console.log('[Schema Debug] Added to query parameters');
                                break;
                            case 'header':
                                schema.headerParameters.push(normalizedParam);
                                console.log('[Schema Debug] Added to header parameters');
                                break;
                        }
                    });
                } else if (schema.pathParameters.length === 0) {
                    console.log('[Schema Debug] No explicit parameters found and no path parameters extracted');
                }

                // For POST/PUT/PATCH methods, use actual request schema or fallback to response inference
                if (['POST', 'PUT', 'PATCH'].includes(endpoint.method)) {
                    console.log('[Schema Debug] Processing request body for method:', endpoint.method);

                    // First priority: Use actual request schema from AST analysis
                    if (endpointData.request) {
                        console.log('[Schema Debug] Using actual request schema from AST:', endpointData.request);
                        schema.requestBody = {
                            schema: endpointData.request,
                            required: true,
                            contentType: 'application/json'
                        };
                    }
                    // Fallback: Infer from response schema (legacy behavior)
                    else {
                        console.log('[Schema Debug] No request schema found, inferring from response');
                        schema.requestBody = this.inferRequestBodyFromResponse(endpointData.response);
                        if (schema.requestBody) {
                            console.log('[Schema Debug] Successfully inferred request body from response');
                        } else {
                            console.log('[Schema Debug] Could not infer request body from response');
                        }
                    }
                } else {
                    console.log('[Schema Debug] Method does not typically require request body:', endpoint.method);
                }

                // Extract examples
                if (endpointData.examples) {
                    schema.examples = endpointData.examples;

                }
            } else {

            }

            console.log('[Schema Debug] Final extracted schema:', schema);

            return schema;
        },

        // Extract path parameters from URL path
        extractPathParameters(path) {
            console.log('[Schema Debug] extractPathParameters called with path:', path);
            const params = [];
            const regex = /{([^}]+)}/g;
            let match;

            while ((match = regex.exec(path)) !== null) {
                console.log('[Schema Debug] Found path parameter match:', match[1]);
                params.push({
                    name: match[1],
                    type: 'string',
                    required: true,
                    description: `Path parameter: ${match[1]}`,
                    example: '',
                    enum: null,
                    format: null,
                    in: 'path'
                });
            }

            console.log('[Schema Debug] Final extracted path parameters:', params);
            return params;
        },

        // Normalize parameter object
        normalizeParameter(param) {


            const normalized = {
                name: param.name || 'unknown',
                type: param.schema?.type || param.type || 'string',
                required: param.required || false,
                description: param.description || `${param.in} parameter`,
                example: param.example || param.schema?.example || '',
                enum: param.schema?.enum || param.enum || null,
                format: param.schema?.format || param.format || null,
                in: param.in || 'query'
            };


            return normalized;
        },

        // Infer request body schema ONLY from response
        inferRequestBodyFromResponse(responseSchema) {

            console.log('[Schema Debug] inferRequestBodyFromResponse called with:', responseSchema);

            if (!responseSchema) {
                console.log('[Schema Debug] No response schema provided, using default');
                return this.getDefaultRequestBody();
            }

            // Dynamic detection of data structure in response
            let resourceSchema = null;

            // First, try to find a nested data object in the response
            if (responseSchema.properties) {
                console.log('[Schema Debug] Response has properties:', Object.keys(responseSchema.properties));

                // Fields to exclude when looking for data objects (these are metadata, not data)
                const excludeKeys = ['message', 'error', 'errors', 'status', 'code', 'success', 'timestamp', 'meta', 'metadata'];

                // Look for any property that looks like data (purely dynamic detection)
                for (const [key, value] of Object.entries(responseSchema.properties)) {
                    // Skip excluded fields
                    if (excludeKeys.includes(key.toLowerCase())) {
                        continue;
                    }

                    // Look for objects with properties (potential data objects)
                    if (value.type === 'object' && value.properties) {
                        resourceSchema = value;
                        console.log('[Schema Debug] Found dynamic data object under key:', key);
                        break;
                    }
                }

                // If no nested object found, be smarter about using response schema
                if (!resourceSchema && Object.keys(responseSchema.properties).length > 0) {
                    // Check if response only contains metadata fields
                    const metadataFields = ['message', 'error', 'errors', 'status', 'code', 'success', 'timestamp', 'meta', 'metadata'];
                    const responseKeys = Object.keys(responseSchema.properties);
                    const nonMetadataKeys = responseKeys.filter(key => !metadataFields.includes(key.toLowerCase()));

                    if (nonMetadataKeys.length === 0) {
                        // Only metadata fields, don't use response directly
                        console.log('[Schema Debug] Response contains only metadata fields, not using for request body');
                    } else if (nonMetadataKeys.length === 1) {
                        // Single non-metadata field, use it as the data source
                        const dataKey = nonMetadataKeys[0];
                        const dataSchema = responseSchema.properties[dataKey];
                        if (dataSchema.type === 'object' && dataSchema.properties) {
                            resourceSchema = dataSchema;
                            console.log('[Schema Debug] Using single non-metadata field as data source:', dataKey);
                        } else {
                            // Single field but not an object, use response directly but clean it
                            resourceSchema = responseSchema;
                            console.log('[Schema Debug] Using response schema directly (single non-object field)');
                        }
                    } else {
                        // Multiple non-metadata fields, use response directly but it will be cleaned
                        resourceSchema = responseSchema;
                        console.log('[Schema Debug] Using response schema directly (multiple non-metadata fields)');
                    }
                }
            }

            // If response is an array, look at the items schema
            if (!resourceSchema && responseSchema.type === 'array' && responseSchema.items) {
                console.log('[Schema Debug] Response is array, using items schema:', responseSchema.items);
                resourceSchema = responseSchema.items;
            }

            if (resourceSchema) {
                console.log('[Schema Debug] Found resource schema:', resourceSchema);
                // Clean the schema by removing server-generated fields
                const cleanedSchema = this.cleanSchemaForRequest(resourceSchema);
                console.log('[Schema Debug] Cleaned schema:', cleanedSchema);

                return {
                    type: 'object',
                    required: true,
                    schema: cleanedSchema,
                    description: 'Request payload (inferred from response structure)'
                };
            }

            console.log('[Schema Debug] No resource schema found, using default request body');
            return this.getDefaultRequestBody();
        },

        // Get default request body when inference fails
        getDefaultRequestBody() {
            return {
                type: 'object',
                required: true,
                schema: {
                    type: 'object',
                    properties: {},
                    additionalProperties: true
                },
                description: 'Request payload (using flexible schema)'
            };
        },

        // Clean schema for request by removing server-generated fields
        cleanSchemaForRequest(schema) {
            if (!schema) return schema;

            console.log('[Schema Debug] cleanSchemaForRequest called with schema:', schema);

            // Expanded list of server-generated fields to exclude
            const excludeFields = [
                'id',
                'created_at',
                'updated_at',

            ];

            // If schema has properties, filter them
            if (schema.properties) {
                console.log('[Schema Debug] Processing schema properties:', Object.keys(schema.properties));
                const cleanedProperties = {};

                Object.entries(schema.properties).forEach(([key, value]) => {
                    const lowerKey = key.toLowerCase();
                    const shouldExclude = excludeFields.some(field =>
                        lowerKey === field ||
                        lowerKey === `${field}_id` ||
                        lowerKey.endsWith(`_${field}`)
                    );

                    console.log(`[Schema Debug] Processing field: ${key}, type: ${value.type}, shouldExclude: ${shouldExclude}`, value);

                    if (!shouldExclude) {
                        cleanedProperties[key] = value;
                        console.log(`[Schema Debug] Kept field: ${key} with type: ${value.type}`);
                    } else {
                        console.log(`[Schema Debug] Excluded field: ${key}`);
                    }
                });

                return {
                    ...schema,
                    properties: cleanedProperties,
                    required: schema.required ? schema.required.filter(field =>
                        !excludeFields.some(exclude => field.toLowerCase() === exclude)
                    ) : []
                };
            }

            return schema;
        }
    };
{{end}}
