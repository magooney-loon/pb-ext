{{define "api_schema_manager_js"}}
    // =============================================================================
    // API SCHEMA MANAGER - SCHEMA EXTRACTION AND PROCESSING
    // =============================================================================

    const APISchemaManager = {
        initialized: false,
        configValidated: false,

        // Initialize with schema configuration
        async init() {
            if (this.initialized) {
                return true;
            }

            try {
                await APIState.loadSchemaConfig();
                this.validateConfiguration();
                this.initialized = true;
                console.log('APISchemaManager initialized successfully');
                return true;
            } catch (error) {
                console.error('APISchemaManager initialization failed:', error);
                throw error;
            }
        },

        // Validate loaded schema configuration
        validateConfiguration() {
            const config = APIState.schemaConfig;

            if (!config) {
                throw new Error('Schema configuration is not loaded');
            }

            // Validate required fields
            const requiredFields = ['system_fields', 'default_parameter_type', 'default_content_type'];
            for (const field of requiredFields) {
                if (!config[field]) {
                    console.warn(`Schema configuration missing required field: ${field}`);
                }
            }

            // Validate system fields array
            if (!Array.isArray(config.system_fields) || config.system_fields.length === 0) {
                console.warn('Schema configuration has invalid or empty system_fields array');
            }

            // Validate supported content types
            if (config.supported_content_types && !Array.isArray(config.supported_content_types)) {
                console.warn('Schema configuration has invalid supported_content_types');
            }

            this.configValidated = true;
        },

        // Check if configuration is ready for use
        isReady() {
            return this.initialized && this.configValidated && APIState.schemaConfig;
        },

        // Extract parameter schema from endpoint data
        extractParameterSchema(endpoint) {

            const schema = {
                pathParameters: [],
                queryParameters: [],
                headerParameters: [],
                requestBody: null
            };

            // Extract from OpenAPI endpoint data if available
            if (endpoint.data) {
                const endpointData = endpoint.data;


                // Extract path parameters from the path itself if not explicitly defined
                const pathParams = this.extractPathParameters(endpoint.path);
                if (pathParams.length > 0 && (!endpointData.parameters || endpointData.parameters.length === 0)) {
                    schema.pathParameters = pathParams;
                }

                // Extract parameters
                if (endpointData.parameters && Array.isArray(endpointData.parameters)) {

                    endpointData.parameters.forEach((param, index) => {

                        const normalizedParam = this.normalizeParameter(param);

                        switch (param.in) {
                            case 'path':
                                schema.pathParameters.push(normalizedParam);
                                break;
                            case 'query':
                                schema.queryParameters.push(normalizedParam);
                                break;
                            case 'header':
                                schema.headerParameters.push(normalizedParam);
                                break;
                        }
                    });
                }

                // For POST/PUT/PATCH methods, use only actual request schema
                if (['POST', 'PUT', 'PATCH'].includes(endpoint.method)) {
                    // Only use actual request schema from AST analysis
                    if (endpointData.request) {
                        schema.requestBody = {
                            schema: endpointData.request,
                            required: true,
                            contentType: APIState.getDefaultContentType()
                        };
                    }
                    // No fallback - if no request schema, no form fields will be generated
                }


            } else {

            }

            return schema;
        },

        // Extract path parameters from URL path
        extractPathParameters(path) {
            const params = [];
            const regex = /{([^}]+)}/g;
            let match;

            while ((match = regex.exec(path)) !== null) {
                params.push({
                    name: match[1],
                    type: APIState.getDefaultParameterType(),
                    required: true,
                    description: APIState.getDescriptionTemplate('path', match[1]),
                    enum: null,
                    format: null,
                    in: 'path'
                });
            }

            return params;
        },

        // Normalize parameter object
        normalizeParameter(param) {


            const normalized = {
                name: param.name || 'unknown',
                type: param.schema?.type || param.type || APIState.getDefaultParameterType(),
                required: param.required || false,
                description: param.description || APIState.getDescriptionTemplate(param.in || 'query', param.name || 'unknown'),
                enum: param.schema?.enum || param.enum || null,
                format: param.schema?.format || param.format || null,
                in: param.in || APIState.getDefaultParameterIn()
            };


            return normalized;
        },





        // Clean schema for request by removing server-generated fields
        cleanSchemaForRequest(schema) {
            if (!schema) return schema;

            // Get system fields from configuration instead of hardcoding
            const excludeFields = APIState.getSystemFields();

            // If schema has properties, filter them
            if (schema.properties) {
                const cleanedProperties = {};

                Object.entries(schema.properties).forEach(([key, value]) => {
                    const lowerKey = key.toLowerCase();
                    const shouldExclude = excludeFields.some(field =>
                        lowerKey === field ||
                        lowerKey === `${field}_id` ||
                        lowerKey.endsWith(`_${field}`)
                    );

                    if (!shouldExclude) {
                        cleanedProperties[key] = value;
                    }
                });

                return {
                    ...schema,
                    properties: cleanedProperties,
                    required: schema.required ? schema.required.filter(field =>
                        !excludeFields.some(exclude => field.toLowerCase() === exclude)
                    ) : []
                };
            }

            return schema;
        }
    };
{{end}}
