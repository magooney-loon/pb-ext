{{define "api_endpoint_renderer_js"}}
    // =============================================================================
    // ENDPOINT RENDERER - SIMPLIFIED FOR AST-BASED SYSTEM
    // =============================================================================

    const EndpointRenderer = {
        render() {
            const container = document.getElementById('endpoints-list');
            if (!container) return;

            // Clean up existing listeners before re-rendering
            this.cleanup();

            if (!APIState.filteredEndpoints || APIState.filteredEndpoints.length === 0) {
                this.renderEmpty(container);
                return;
            }

            try {
                const html = APIState.filteredEndpoints.map(endpoint => this.renderEndpoint(endpoint)).join('');
                container.innerHTML = html;

                // Always attach fresh listeners after re-rendering
                this.attachEventListeners(container);

                console.log(`Rendered ${APIState.filteredEndpoints.length} endpoints`);
            } catch (error) {
                console.error('Failed to render endpoints:', error);
                this.renderError(container, error);
            }
        },

        renderError(container, error) {
            container.innerHTML = `
                <div class="txt-center txt-danger p-4">
                    <i class="ri-error-warning-line ri-2x mb-2"></i>
                    <h4>Failed to render endpoints</h4>
                    <p class="txt-sm">${error.message}</p>
                    <button onclick="location.reload()" class="btn btn-sm btn-outline mt-2">
                        <i class="ri-refresh-line"></i> Reload Page
                    </button>
                </div>
            `;
        },

        renderEmpty(container) {
            // Clean up listeners when rendering empty state
            this.cleanup();

            const message = APIState.allEndpoints.length === 0
                ? 'No API endpoints discovered yet'
                : 'No endpoints match your current filters';

            container.innerHTML = `
                <div class="txt-center txt-hint p-4">
                    <i class="ri-route-line ri-2x mb-2"></i>
                    <h4>${message}</h4>
                    ${APIState.allEndpoints.length > 0 ? `
                        <button onclick="UIController.clearFilters()" class="btn btn-sm btn-outline mt-2">
                            <i class="ri-close-line"></i> Clear Filters
                        </button>
                    ` : ''}
                </div>
            `;
        },

        renderEndpoint(endpoint) {
            const method = endpoint.method.toLowerCase();
            const operationId = (endpoint.handler || 'unknown').replace(/[^a-zA-Z0-9]/g, '_');
            const authRequired = endpoint.auth?.required;

            return `
                <div class="api-endpoint">
                    <div class="api-endpoint-header" data-toggle="endpoint">
                        <span class="http-method ${method}">${method.toUpperCase()}</span>
                        <span class="flex-fill txt-mono">${endpoint.path}</span>
                        <span class="txt-sm txt-hint">${endpoint.description}</span>
                        ${authRequired ? `<span class="auth-icon" title="${endpoint.auth.description}">${endpoint.auth.icon}</span>` : ''}
                        <button class="test-endpoint-btn" title="Test endpoint in sidebar"
                                data-method="${method}"
                                data-path="${endpoint.path}"
                                data-endpoint='${JSON.stringify(endpoint).replace(/'/g, "&apos;")}'>
                            <i class="ri-flask-line"></i>
                            Test
                        </button>
                        <i class="ri-arrow-down-s-line"></i>
                    </div>
                    <div class="api-endpoint-content">
                        ${this.renderEndpointDetails(endpoint, operationId)}
                    </div>
                </div>
            `;
        },

        renderEndpointDetails(endpoint, operationId) {
            return `
                <div class="mb-2">
                    <strong>Description:</strong>
                    <p class="txt-sm txt-hint mt-1">${endpoint.description}</p>
                </div>

                ${this.renderAuthSection(endpoint.auth)}

                ${endpoint.tags?.length ? `
                    <div class="mb-2">
                        <strong>Tags:</strong>
                        <div class="flex gap-1 mt-1">
                            ${endpoint.tags.map(tag => `<span class="badge badge-sm">${tag}</span>`).join('')}
                        </div>
                    </div>
                ` : ''}

                ${this.renderSchemaSection('Request', endpoint.request, `request-${operationId}`)}
                ${this.renderSchemaSection('Response', endpoint.response, `response-${operationId}`)}
            `;
        },

        renderAuthSection(auth) {
            if (!auth?.required) {
                return `
                    <div class="mb-2">
                        <strong>Authentication:</strong>
                        <div class="auth-details auth-none mt-1">
                            <div class="flex align-center gap-2">
                                <span class="auth-icon-large">üåê</span>
                                <div>
                                    <div class="txt-sm txt-bold txt-success">No authentication required</div>
                                    <div class="auth-type">public access</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            return `
                <div class="mb-2">
                    <strong>Authentication:</strong>
                    <div class="auth-details mt-1">
                        <div class="flex align-center gap-2 mb-2">
                            <span class="auth-icon-large auth-${auth.type}">${auth.icon}</span>
                            <div class="flex-fill">
                                <div class="txt-sm txt-bold">${auth.description}</div>
                                <div class="auth-type">${auth.type.replace(/_/g, ' ')}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        },

        renderSchemaSection(title, schema, id) {
            if (!schema) return '';

            return `
                <div class="mb-2">
                    <div class="flex justify-between align-center mb-1">
                        <strong>${title} Schema:</strong>
                        <button class="btn btn-xs btn-secondary copy-schema-btn" data-copy-target="${id}">
                            <i class="ri-file-copy-line"></i> Copy
                        </button>
                    </div>
                    <div id="${id}" class="schema-container mt-1">${this.formatSchema(schema)}</div>
                </div>
            `;
        },

        formatSchema(schema) {
            if (!schema) return '<div class="code-block"><span class="json-null">No schema available</span></div>';

            if (typeof schema === 'string') {
                return `<div class="code-block"><pre><code>${this._escapeHtml(schema)}</code></pre></div>`;
            }

            // Use SchemaProcessor if available for better formatting
            if (typeof SchemaProcessor !== 'undefined') {
                try {
                    return SchemaProcessor.formatForDisplay(schema, 'json');
                } catch (error) {
                    console.warn('SchemaProcessor formatting failed, falling back to JSON.stringify:', error);
                }
            }

            // Fallback to basic JSON formatting
            return `<div class="code-block"><pre><code>${this._escapeHtml(JSON.stringify(schema, null, 2))}</code></pre></div>`;
        },

        _escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        },

        attachEventListeners(container) {
            // Remove any existing event listeners from this renderer
            if (this._clickHandler) {
                container.removeEventListener('click', this._clickHandler);
            }

            // Create new click handler bound to this instance
            this._clickHandler = (e) => {
                // Handle test button clicks FIRST (highest priority)
                const testBtn = e.target.closest('.test-endpoint-btn');
                if (testBtn) {
                    e.preventDefault();
                    e.stopPropagation();

                    const method = testBtn.dataset.method;
                    const path = testBtn.dataset.path;
                    let endpointData = testBtn.dataset.endpoint;

                    // Unescape HTML entities in JSON
                    if (endpointData) {
                        endpointData = endpointData.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
                    }

                    console.log(`Opening API tester for: ${method.toUpperCase()} ${path}`);

                    if (window.APITester && window.APITester.openSidebar) {
                        try {
                            const endpoint = JSON.parse(endpointData);
                            window.APITester.openSidebar(method, path, endpoint);
                        } catch (error) {
                            console.error('Failed to parse endpoint data:', error);
                            // Fallback to basic data
                            window.APITester.openSidebar(method, path, {
                                method: method,
                                path: path,
                                description: 'API endpoint'
                            });
                        }
                    } else {
                        console.error('APITester not available or missing openSidebar method');

                        // Try fallback to APITesterSidebar directly
                        if (window.APITesterSidebar && window.APITesterSidebar.openSidebar) {
                            try {
                                const endpoint = JSON.parse(endpointData);
                                window.APITesterSidebar.openSidebar(method, path, endpoint);
                            } catch (error) {
                                console.error('Fallback also failed:', error);
                            }
                        }
                    }
                    return;
                }

                // Handle copy schema buttons
                const copyBtn = e.target.closest('.copy-schema-btn');
                if (copyBtn) {
                    e.preventDefault();
                    e.stopPropagation();
                    this.copySchemaToClipboard(copyBtn);
                    return;
                }

                // Handle endpoint toggle (lowest priority)
                const header = e.target.closest('.api-endpoint-header[data-toggle="endpoint"]');
                if (header) {
                    // Don't toggle if clicking on buttons (redundant safety check)
                    if (e.target.closest('.test-endpoint-btn') || e.target.closest('.copy-schema-btn')) {
                        return;
                    }

                    e.preventDefault();
                    e.stopPropagation();

                    const content = header.parentElement.querySelector('.api-endpoint-content');
                    if (content) {
                        const wasActive = content.classList.contains('active');
                        content.classList.toggle('active');

                        const endpointPath = header.querySelector('.txt-mono')?.textContent || 'unknown';
                        console.log(`Endpoint ${endpointPath} ${wasActive ? 'collapsed' : 'expanded'}`);
                    }
                    return;
                }
            };

            // Attach the new handler
            container.addEventListener('click', this._clickHandler);
        },

        copySchemaToClipboard(button) {
            const targetId = button.getAttribute('data-copy-target');
            const targetElement = document.getElementById(targetId);
            if (!targetElement) {
                console.error('Copy target element not found:', targetId);
                return;
            }

            // Extract content from the formatted schema container
            let content;
            const codeElement = targetElement.querySelector('code');
            if (codeElement) {
                content = codeElement.textContent || codeElement.innerText;
            } else {
                content = targetElement.textContent || targetElement.innerText;
            }

            if (!content || content.trim() === '') {
                console.warn('No content to copy for target:', targetId);
                return;
            }

            console.log(`Copying schema content (${content.length} characters)`);

            navigator.clipboard.writeText(content).then(() => {
                const originalHtml = button.innerHTML;
                button.innerHTML = '<i class="ri-check-line"></i> Copied!';
                button.classList.add('btn-success');
                button.classList.remove('btn-secondary');

                setTimeout(() => {
                    button.innerHTML = originalHtml;
                    button.classList.remove('btn-success');
                    button.classList.add('btn-secondary');
                }, 2000);

                console.log('Schema content copied to clipboard successfully');
            }).catch(err => {
                console.error('Failed to copy schema:', err);
                button.innerHTML = '<i class="ri-close-line"></i> Failed';
                button.classList.add('btn-danger');
                button.classList.remove('btn-secondary');

                setTimeout(() => {
                    button.innerHTML = '<i class="ri-file-copy-line"></i> Copy';
                    button.classList.remove('btn-danger');
                    button.classList.add('btn-secondary');
                }, 2000);
            });
        },

        // Cleanup method to remove event listeners
        cleanup() {
            const container = document.getElementById('endpoints-list');
            if (container && this._clickHandler) {
                container.removeEventListener('click', this._clickHandler);
                this._clickHandler = null;
            }
        }
    };
{{end}}
