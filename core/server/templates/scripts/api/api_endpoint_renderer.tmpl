{{define "api_endpoint_renderer_js"}}
    // =============================================================================
    // UI CONTROLLERS - ENDPOINT RENDERING
    // =============================================================================

    const EndpointRenderer = {
        render() {
            const container = document.getElementById('endpoints-list');
            if (!container) return;

            if (!APIState.filteredEndpoints || APIState.filteredEndpoints.length === 0) {
                this.renderEmpty(container);
                return;
            }

            try {
                const html = APIState.filteredEndpoints.map(endpoint => this.renderEndpoint(endpoint)).join('');
                container.innerHTML = html;

                this.attachEventListeners(container);

                console.log(`Rendered ${APIState.filteredEndpoints.length} endpoints`);
            } catch (error) {
                console.error('Failed to render endpoints:', error);
                this.renderError(container, error);
            }
        },

        renderError(container, error) {
            container.innerHTML = `
                <div class="txt-center txt-danger p-4">
                    <i class="ri-error-warning-line ri-2x mb-2"></i>
                    <h4>Failed to render endpoints</h4>
                    <p class="txt-sm">${error.message}</p>
                    <button onclick="location.reload()" class="btn btn-sm btn-outline mt-2">
                        <i class="ri-refresh-line"></i> Reload Page
                    </button>
                </div>
            `;
        },

        renderEmpty(container) {
            const message = APIState.allEndpoints.length === 0
                ? 'No API endpoints discovered yet'
                : 'No endpoints match your current filters';

            container.innerHTML = `
                <div class="txt-center txt-hint p-4">
                    <i class="ri-route-line ri-2x mb-2"></i>
                    <h4>${message}</h4>
                    ${APIState.allEndpoints.length > 0 ? `
                        <button onclick="window.FilterController.clearFilters()" class="btn btn-sm btn-outline mt-2">
                            <i class="ri-close-line"></i> Clear Filters
                        </button>
                    ` : ''}
                </div>
            `;
        },

        renderEndpoint(endpoint) {
            const method = endpoint.method.toLowerCase();
            const operationId = endpoint.handler_name.replace(/[^a-zA-Z0-9]/g, '_');
            const authRequired = endpoint.auth?.required;

            return `
                <div class="api-endpoint">
                    <div class="api-endpoint-header" data-toggle="endpoint">
                        <span class="http-method ${method}">${method.toUpperCase()}</span>
                        <span class="flex-fill txt-mono">${endpoint.path}</span>
                        <span class="txt-sm txt-hint">${endpoint.description}</span>
                        ${authRequired ? `<span class="auth-icon" title="${endpoint.auth.description}">${endpoint.auth.icon}</span>` : ''}
                        <button class="test-endpoint-btn" title="Test endpoint in sidebar"
                                data-method="${method}"
                                data-path="${endpoint.path}"
                                data-endpoint='${JSON.stringify(endpoint).replace(/'/g, "&apos;")}'>
                            <i class="ri-flask-line"></i>
                            Test
                        </button>
                        <i class="ri-arrow-down-s-line"></i>
                    </div>
                    <div class="api-endpoint-content">
                        ${this.renderEndpointDetails(endpoint, operationId)}
                    </div>
                </div>
            `;
        },

        renderEndpointDetails(endpoint, operationId) {
            return `
                <div class="mb-2">
                    <strong>Description:</strong>
                    <p class="txt-sm txt-hint mt-1">${endpoint.description}</p>
                </div>

                ${this.renderAuthSection(endpoint.auth)}

                ${endpoint.tags?.length ? `
                    <div class="mb-2">
                        <strong>Tags:</strong>
                        <div class="flex gap-1 mt-1">
                            ${endpoint.tags.map(tag => `<span class="badge badge-sm">${tag}</span>`).join('')}
                        </div>
                    </div>
                ` : ''}

                ${this.renderSchemaSection('Request', endpoint.request, `request-${operationId}`)}
                ${this.renderSchemaSection('Response', endpoint.response, `response-${operationId}`)}
            `;
        },

        renderAuthSection(auth) {
            if (!auth?.required) {
                return `
                    <div class="mb-2">
                        <strong>Authentication:</strong>
                        <div class="auth-details auth-none mt-1">
                            <div class="flex align-center gap-2">
                                <span class="auth-icon-large">üåê</span>
                                <div>
                                    <div class="txt-sm txt-bold txt-success">No authentication required</div>
                                    <div class="auth-type">public access</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            }

            return `
                <div class="mb-2">
                    <strong>Authentication:</strong>
                    <div class="auth-details mt-1">
                        <div class="flex align-center gap-2 mb-2">
                            <span class="auth-icon-large auth-${auth.type}">${auth.icon}</span>
                            <div class="flex-fill">
                                <div class="txt-sm txt-bold">${auth.description}</div>
                                <div class="auth-type">${auth.type.replace(/_/g, ' ')}</div>
                            </div>
                        </div>
                        ${auth.collections?.length ? `
                            <div class="auth-param">
                                <strong>Required Collections:</strong>
                                ${auth.collections.map(c => `<code class="auth-collection">${c}</code>`).join(', ')}
                            </div>
                        ` : ''}
                        ${auth.owner_param ? `
                            <div class="auth-param">
                                <strong>Owner Parameter:</strong> <code class="auth-param-code">${auth.owner_param}</code>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
        },

        renderSchemaSection(title, schema, id) {
            if (!schema) return '';

            // Get supported content types from schema config for enhanced display
            const supportedTypes = APIState.schemaConfig?.supported_content_types || ['application/json'];
            const defaultContentType = APIState.getDefaultContentType();

            return `
                <div class="mb-2">
                    <div class="flex justify-between align-center mb-1">
                        <strong>${title} Schema:</strong>
                        <div class="flex gap-1 align-center">
                            ${title === 'Request' && supportedTypes.length > 1 ? `
                                <span class="txt-xs txt-hint">Content-Type: ${defaultContentType}</span>
                            ` : ''}
                            <button class="btn btn-xs btn-secondary copy-schema-btn" data-copy-target="${id}">
                                <i class="ri-file-copy-line"></i> Copy
                            </button>
                        </div>
                    </div>
                    <pre class="code-block mt-1"><code id="${id}">${SchemaProcessor.syntaxHighlight(schema)}</code></pre>
                    ${this.renderSchemaInfo(schema, supportedTypes)}
                </div>
            `;
        },

        renderSchemaInfo(schema, supportedTypes) {
            if (!schema || typeof schema !== 'object') return '';

            let info = '';

            // Show system fields that would be excluded from requests
            if (schema.properties) {
                const systemFields = APIState.getSystemFields();
                const hasSystemFields = Object.keys(schema.properties).some(key =>
                    systemFields.includes(key.toLowerCase())
                );

                if (hasSystemFields) {
                    info += `
                        <div class="txt-xs txt-hint mt-1">
                            <i class="ri-information-line"></i>
                            System fields (${systemFields.join(', ')}) are auto-generated and excluded from requests
                        </div>
                    `;
                }
            }

            return info;
        },

        attachEventListeners(container) {
            // Handle endpoint toggle
            container.addEventListener('click', (e) => {
                const header = e.target.closest('.api-endpoint-header');
                if (header && header.dataset.toggle === 'endpoint') {
                    // Don't toggle if clicking on test button
                    if (!e.target.closest('.test-endpoint-btn')) {
                        const content = header.parentElement.querySelector('.api-endpoint-content');
                        if (content) {
                            const wasActive = content.classList.contains('active');
                            content.classList.toggle('active');

                            // Log for debugging
                            const endpoint = header.parentElement.querySelector('.txt-mono').textContent;
                            console.log(`Endpoint ${endpoint} ${wasActive ? 'collapsed' : 'expanded'}`);
                        }
                    }
                }
            });

            // Handle test button clicks
            container.addEventListener('click', (e) => {
                if (e.target.closest('.test-endpoint-btn')) {
                    e.stopPropagation();
                    const button = e.target.closest('.test-endpoint-btn');
                    const method = button.dataset.method;
                    const path = button.dataset.path;
                    let endpointData = button.dataset.endpoint;

                    // Unescape HTML entities in JSON
                    if (endpointData) {
                        endpointData = endpointData.replace(/&apos;/g, "'").replace(/&quot;/g, '"');
                    }

                    console.log(`Opening API tester for: ${method.toUpperCase()} ${path}`);

                    // Check if schema configuration is ready
                    if (!APISchemaManager.isReady()) {
                        console.warn('Schema configuration not ready, tester may use fallback values');
                    }

                    if (window.APITester && window.APITester.openSidebar) {
                        window.APITester.openSidebar(method, path, endpointData);
                    } else {
                        console.error('APITester not available');
                    }
                }
            });

            // Handle copy schema buttons
            container.querySelectorAll('.copy-schema-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.copySchemaToClipboard(button);
                });
            });
        },

        copySchemaToClipboard(button) {
            const targetId = button.getAttribute('data-copy-target');
            const targetElement = document.getElementById(targetId);
            if (!targetElement) {
                console.error('Copy target element not found:', targetId);
                return;
            }

            const content = targetElement.textContent || targetElement.innerText;

            if (!content || content.trim() === '') {
                console.warn('No content to copy for target:', targetId);
                return;
            }

            console.log(`Copying schema content (${content.length} characters)`);

            navigator.clipboard.writeText(content).then(() => {
                const originalHtml = button.innerHTML;
                button.innerHTML = '<i class="ri-check-line"></i> Copied!';
                button.classList.add('btn-success');
                button.classList.remove('btn-secondary');

                setTimeout(() => {
                    button.innerHTML = originalHtml;
                    button.classList.remove('btn-success');
                    button.classList.add('btn-secondary');
                }, 2000);

                console.log('Schema content copied to clipboard successfully');
            }).catch(err => {
                console.error('Failed to copy schema:', err);
                button.innerHTML = '<i class="ri-close-line"></i> Failed';
                button.classList.add('btn-danger');
                button.classList.remove('btn-secondary');

                setTimeout(() => {
                    button.innerHTML = '<i class="ri-file-copy-line"></i> Copy';
                    button.classList.remove('btn-danger');
                    button.classList.add('btn-secondary');
                }, 2000);
            });
        },

        // Get configuration-aware debug information
        getDebugInfo() {
            return {
                schemaConfigReady: APISchemaManager.isReady(),
                systemFields: APIState.getSystemFields(),
                defaultContentType: APIState.getDefaultContentType(),
                supportedContentTypes: APIState.schemaConfig?.supported_content_types || [],
                endpointsCount: APIState.filteredEndpoints?.length || 0
            };
        }
    };

    // Expose FilterController globally so it can be called from HTML templates
    window.FilterController = FilterController;
{{end}}
