{{define "api_example_generator_js"}}
    // =============================================================================
    // API EXAMPLE GENERATOR - EXAMPLE GENERATION AND DEFAULT VALUE POPULATION
    // =============================================================================

    const APIExampleGenerator = {

        // Generate request body example from schema
        generateRequestBodyExample(schema, endpoint) {

            if (!schema || !schema.schema) {
                return '{\n  "key": "value"\n}';
            }

            try {
                if (schema.example) {
                    return JSON.stringify(schema.example, null, 2);
                }

                // If schema has no properties but response exists, infer from response
                if ((!schema.schema.properties || Object.keys(schema.schema.properties).length === 0)
                    && endpoint.data?.response) {
                    const example = this.generateExampleFromResponse(endpoint.data.response);
                    if (example && Object.keys(example).length > 0) {
                        return JSON.stringify(example, null, 2);
                    }
                }

                // Generate example from schema properties
                const example = this.generateExampleFromSchema(schema.schema);
                return JSON.stringify(example, null, 2);

            } catch (error) {
                console.error('Error generating request body example:', error);
                return '{\n  "key": "value"\n}';
            }
        },

        // Generate example object from schema
        generateExampleFromSchema(schema) {

            if (!schema || typeof schema !== 'object') return {};

            const example = {};

            if (schema.properties) {
                Object.entries(schema.properties).forEach(([propName, propSchema]) => {
                    if (propSchema.example !== undefined) {
                        example[propName] = propSchema.example;
                    } else {
                        switch (propSchema.type) {
                            case 'string':
                                if (propSchema.enum && propSchema.enum.length > 0) {
                                    example[propName] = propSchema.enum[0];
                                } else if (propName.toLowerCase().includes('email')) {
                                    example[propName] = 'user@example.com';
                                } else if (propName.toLowerCase().includes('name')) {
                                    example[propName] = `Example ${propName}`;
                                } else if (propName.toLowerCase().includes('title')) {
                                    example[propName] = 'Example Title';
                                } else if (propName.toLowerCase().includes('content') || propName.toLowerCase().includes('description')) {
                                    example[propName] = 'Example content or description text...';
                                } else if (propName.toLowerCase().includes('url') || propName.toLowerCase().includes('link')) {
                                    example[propName] = 'https://example.com';
                                } else {
                                    example[propName] = `example_${propName}`;
                                }
                                break;
                            case 'integer':
                                example[propName] = propSchema.minimum || 1;
                                break;
                            case 'number':
                                example[propName] = propSchema.minimum || 1.0;
                                break;
                            case 'boolean':
                                example[propName] = propSchema.default !== undefined ? propSchema.default : true;
                                break;
                            case 'array':
                                if (propSchema.items) {
                                    const itemExample = this.generateExampleFromSchema({ properties: { item: propSchema.items } });
                                    example[propName] = [itemExample.item];
                                } else {
                                    example[propName] = [`example_${propName}_item`];
                                }
                                break;
                            case 'object':
                                example[propName] = this.generateExampleFromSchema(propSchema);
                                break;
                            default:
                                example[propName] = `example_${propName}`;
                        }
                    }
                });
            }

            return example;
        },

        // Generate request example from response schema
        generateExampleFromResponse(responseSchema) {

            if (!responseSchema || !responseSchema.properties) return {};

            const example = {};

            // If response has a main data object (like 'post'), extract from it
            const dataKeys = ['post', 'data', 'item', 'resource', 'object', 'entity', 'record'];
            let mainDataProp = null;

            for (const key of dataKeys) {
                if (responseSchema.properties[key] && responseSchema.properties[key].properties) {
                    mainDataProp = responseSchema.properties[key];
                    break;
                }
            }

            // If no nested data found, use response properties directly
            if (!mainDataProp && responseSchema.properties) {
                mainDataProp = responseSchema;
            }

            if (mainDataProp && mainDataProp.properties) {
                // Fields to exclude from request (usually server-generated)
                const excludeFields = [
                    'id',
                'created_at',
                'updated_at',
                ];

                Object.entries(mainDataProp.properties).forEach(([propName, propSchema]) => {
                    // Skip server-generated fields
                    const lowerPropName = propName.toLowerCase();
                    const shouldExclude = excludeFields.some(field =>
                        lowerPropName === field ||
                        lowerPropName === `${field}_id` ||
                        lowerPropName.endsWith(`_${field}`)
                    );

                    if (shouldExclude) {
                        return;
                    }

                    // Generate example value based on property schema
                    if (propSchema.example !== undefined) {
                        example[propName] = propSchema.example;
                    } else if (propSchema.type === 'string') {
                        if (propName === 'title') {
                            example[propName] = 'My New Post';
                        } else if (propName === 'content' || propName === 'body') {
                            example[propName] = 'This is the content of my post...';
                        } else if (propName === 'status') {
                            example[propName] = propSchema.enum?.[0] || 'draft';
                        } else if (propName === 'tags') {
                            example[propName] = 'tag1, tag2';
                        } else if (propName.includes('email')) {
                            example[propName] = 'user@example.com';
                        } else if (propName.includes('name')) {
                            example[propName] = `Example ${propName}`;
                        } else if (propName.includes('url') || propName.includes('link')) {
                            example[propName] = 'https://example.com';
                        } else {
                            example[propName] = `Example ${propName}`;
                        }
                    } else if (propSchema.type === 'boolean') {
                        example[propName] = false;
                    } else if (propSchema.type === 'integer') {
                        example[propName] = 1;
                    } else if (propSchema.type === 'number') {
                        example[propName] = 1.0;
                    } else if (propSchema.type === 'array') {
                        example[propName] = [];
                    } else if (propSchema.type === 'object') {
                        example[propName] = this.generateExampleFromSchema(propSchema);
                    }
                });
            }

            return example;
        },

        // Populate default values in form fields
        populateDefaultValues(parameterSchema) {

            if (!parameterSchema) {
                return;
            }

            // Populate parameter fields
            [...(parameterSchema.pathParameters || []),
             ...(parameterSchema.queryParameters || []),
             ...(parameterSchema.headerParameters || [])].forEach(param => {
                if (param.example) {
                    const fieldId = `param-${param.in}-${param.name}`;
                    const field = document.getElementById(fieldId);
                    if (field && !field.value) {
                        field.value = param.example;
                    }
                }
            });

            // Populate request body example if available
            if (parameterSchema.requestBody && parameterSchema.requestBody.schema) {
                const isActualRequestSchema = parameterSchema.requestBody.contentType === 'application/json' &&
                                              parameterSchema.requestBody.required !== undefined;

                const rawJsonTextarea = document.getElementById('raw-json-payload');
                const legacyJsonTextarea = document.getElementById('request-body-json');

                if (rawJsonTextarea && (rawJsonTextarea.value.trim() === '{}' || rawJsonTextarea.value.trim() === '')) {
                    const example = this.generateExampleFromSchema(parameterSchema.requestBody.schema);
                    if (example && Object.keys(example).length > 0) {
                        rawJsonTextarea.value = JSON.stringify(example, null, 2);
                    }
                } else if (legacyJsonTextarea && !legacyJsonTextarea.value.trim()) {
                    const example = this.generateExampleFromSchema(parameterSchema.requestBody.schema);
                    if (example && Object.keys(example).length > 0) {
                        legacyJsonTextarea.value = JSON.stringify(example, null, 2);
                    }
                }

                // Also populate individual form fields if they exist
                this.populateFormFieldsFromSchema(parameterSchema.requestBody.schema);
            }
        },

        // Populate individual form fields with examples from schema
        populateFormFieldsFromSchema(schema) {
            if (!schema || !schema.properties) return;

            Object.entries(schema.properties).forEach(([fieldName, fieldSchema]) => {
                const fieldElement = document.querySelector(`[data-body-field="${fieldName}"]`);
                if (fieldElement && !fieldElement.value) {
                    const example = this.generateFieldExample(fieldSchema, fieldName);
                    if (example !== null && example !== undefined) {
                        fieldElement.value = example;
                    }
                }
            });
        },

        // Generate field example based on schema and field name
        generateFieldExample(fieldSchema, fieldName) {
            // If the schema has an explicit example, use it
            if (fieldSchema.example !== undefined) {
                return fieldSchema.example;
            }

            const name = fieldName.toLowerCase();
            const type = fieldSchema.type || 'string';

            switch (type) {
                case 'string':
                    if (fieldSchema.enum && fieldSchema.enum.length > 0) {
                        return fieldSchema.enum[0];
                    } else if (fieldSchema.format === 'email') {
                        return 'user@example.com';
                    } else if (fieldSchema.format === 'date-time') {
                        return new Date().toISOString();
                    } else if (fieldSchema.format === 'date') {
                        return new Date().toISOString().split('T')[0];
                    } else if (name.includes('id')) {
                        return 'abc123';
                    } else if (name.includes('email')) {
                        return 'user@example.com';
                    } else if (name.includes('name') || name.includes('title')) {
                        return 'Example ' + fieldName.charAt(0).toUpperCase() + fieldName.slice(1);
                    } else if (name.includes('description')) {
                        return 'Example description';
                    } else if (name.includes('url') || name.includes('link')) {
                        return 'https://example.com';
                    } else if (name.includes('status')) {
                        return 'active';
                    } else if (name.includes('type')) {
                        return 'default';
                    } else if (name.includes('priority')) {
                        return 'medium';
                    } else {
                        return `example_${fieldName}`;
                    }

                case 'integer':
                case 'number':
                    if (name.includes('id')) {
                        return 123;
                    } else if (name.includes('count') || name.includes('total')) {
                        return 10;
                    } else if (name.includes('price') || name.includes('amount')) {
                        return 99.99;
                    } else if (name.includes('age')) {
                        return 25;
                    } else {
                        return fieldSchema.minimum !== undefined ? fieldSchema.minimum : 1;
                    }

                case 'boolean':
                    if (name.includes('completed') || name.includes('done')) {
                        return false;
                    } else if (name.includes('active') || name.includes('enabled')) {
                        return true;
                    } else {
                        return false;
                    }

                case 'array':
                    return [];

                case 'object':
                    return {};

                default:
                    return null;
            }
        },

        // Generate parameter examples based on type and name
        generateParameterExample(param) {
            if (param.example !== undefined) {
                return param.example;
            }

            const name = param.name.toLowerCase();
            const type = param.type;

            switch (type) {
                case 'string':
                    if (param.enum && param.enum.length > 0) {
                        return param.enum[0];
                    } else if (name.includes('id')) {
                        return 'abc123';
                    } else if (name.includes('email')) {
                        return 'user@example.com';
                    } else if (name.includes('name')) {
                        return 'Example Name';
                    } else if (name.includes('url') || name.includes('link')) {
                        return 'https://example.com';
                    } else if (name.includes('status')) {
                        return 'active';
                    } else if (name.includes('type')) {
                        return 'default';
                    } else {
                        return `example_${param.name}`;
                    }

                case 'integer':
                    if (name.includes('id')) {
                        return 123;
                    } else if (name.includes('page')) {
                        return 1;
                    } else if (name.includes('limit') || name.includes('size')) {
                        return 10;
                    } else {
                        return 1;
                    }

                case 'number':
                    return 1.0;

                case 'boolean':
                    return true;

                default:
                    return param.example || '';
            }
        },

        // Generate comprehensive example for complex schemas
        generateCompleteExample(schema, endpoint) {

            const example = {
                path_parameters: {},
                query_parameters: {},
                headers: {},
                body: null
            };

            // Generate path parameter examples
            if (schema.pathParameters) {
                schema.pathParameters.forEach(param => {
                    example.path_parameters[param.name] = this.generateParameterExample(param);
                });
            }

            // Generate query parameter examples
            if (schema.queryParameters) {
                schema.queryParameters.forEach(param => {
                    example.query_parameters[param.name] = this.generateParameterExample(param);
                });
            }

            // Generate header examples
            if (schema.headerParameters) {
                schema.headerParameters.forEach(param => {
                    example.headers[param.name] = this.generateParameterExample(param);
                });
            }

            // Generate request body example
            if (schema.requestBody && ['POST', 'PUT', 'PATCH'].includes(endpoint.method)) {
                const isActualRequestSchema = schema.requestBody.contentType === 'application/json' &&
                                              schema.requestBody.required !== undefined;
                example.body = this.generateRequestBodyExample(schema.requestBody, endpoint);
            }

            return example;
        }
    };
{{end}}
