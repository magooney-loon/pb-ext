{{define "scripts"}}

<script>


    function showPocketBaseElements() {
        // Show elements that should only appear when PocketBase styles are loaded
        document.querySelectorAll('.pb-piggybacked-only').forEach(el => {
            el.style.display = 'inline-flex';
        });
    }

    function setupTabNavigation() {
        const healthTab = document.querySelector('.health-tab');
        const analyticsTab = document.querySelector('.analytics-tab');
        const apiTab = document.querySelector('.api-tab');
        const healthSection = document.getElementById('health-section');
        const analyticsSection = document.getElementById('analytics-section');
        const apiSection = document.getElementById('api-section');

        if (!healthTab || !analyticsTab || !apiTab || !healthSection || !analyticsSection || !apiSection) return;

        function switchToTab(tabName) {
            // Remove current-route class from all tabs
            healthTab.classList.remove('current-route');
            analyticsTab.classList.remove('current-route');
            apiTab.classList.remove('current-route');

            // Hide all sections
            healthSection.style.display = 'none';
            analyticsSection.style.display = 'none';
            apiSection.style.display = 'none';

            if (tabName === 'health') {
                healthTab.classList.add('current-route');
                healthSection.style.display = 'block';
                window.location.hash = 'health';
            } else if (tabName === 'analytics') {
                analyticsTab.classList.add('current-route');
                analyticsSection.style.display = 'block';
                window.location.hash = 'analytics';
            } else if (tabName === 'api') {
                apiTab.classList.add('current-route');
                apiSection.style.display = 'block';
                window.location.hash = 'api';
            }


        }

        // Set initial tab based on hash
        if (window.location.hash === '#analytics') {
            switchToTab('analytics');
        } else if (window.location.hash === '#api') {
            switchToTab('api');
        } else {
            switchToTab('health');
        }

        // Handle tab clicks
        healthTab.addEventListener('click', function(e) {
            e.preventDefault();
            switchToTab('health');
        });

        analyticsTab.addEventListener('click', function(e) {
            e.preventDefault();
            switchToTab('analytics');
        });

        apiTab.addEventListener('click', function(e) {
            e.preventDefault();
            switchToTab('api');
        });

        // Handle hash changes (for browser navigation)
        window.addEventListener('hashchange', function() {
            if (window.location.hash === '#analytics') {
                switchToTab('analytics');
            } else if (window.location.hash === '#api') {
                switchToTab('api');
            } else {
                switchToTab('health');
            }
        });
    }

    window.onload = () => {
        // Show content once loaded
        const contentEl = document.getElementById('content');
        if (contentEl) {
            contentEl.style.opacity = '1';
        }

        // Setup tab navigation
        setupTabNavigation();

        // If body has the pb-piggybacked class, enable PocketBase-specific elements
        if (document.body.classList.contains('pb-styled')) {
            showPocketBaseElements();
        }

        // Also set up a MutationObserver to detect if the class is added later
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    if (document.body.classList.contains('pb-styled')) {
                        showPocketBaseElements();
                        observer.disconnect(); // No need to observe anymore
                    }
                }
            });
        });

        observer.observe(document.body, { attributes: true });
    };
</script>
{{end}}
